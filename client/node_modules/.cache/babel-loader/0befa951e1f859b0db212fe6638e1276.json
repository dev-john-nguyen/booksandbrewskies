{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John\\\\Desktop\\\\Modern React With Redux Projects\\\\beersandbrewskies\\\\beersandbrewskies\\\\src\\\\components\\\\shop\\\\components\\\\checkout\\\\index.js\";\nimport React from 'react';\nimport { ElementsConsumer, CardElement } from '@stripe/react-stripe-js';\nimport { connect } from 'react-redux';\nimport CardSection from './components/CardSection';\nimport IdentitySection from './components/IdentitySection';\nimport AddressSection from './components/AddressSection';\nimport './css/CheckoutFormStyles.css';\nimport Spinner from '../../../spinner';\nimport CartSection from './components/CartSection';\nimport { getLocalStorageUpdateCart } from '../util';\nimport { getStripe, storeOrder } from '../../../../services/order/actions';\nimport history from '../../../../history';\nimport Modal from '../../../Modal';\n\nclass CheckoutForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      name: '',\n      email: '',\n      phone: '',\n      line1: '',\n      city: '',\n      state: '',\n      zip: '',\n      client_secret: '',\n      client_error: false,\n      order_completed: true,\n      orderId: ''\n    };\n\n    this.componentDidMount = async () => {\n      const _this$props = this.props,\n            cartTotal = _this$props.cartTotal,\n            cartProducts = _this$props.cartProducts;\n      getLocalStorageUpdateCart(cartProducts, cartTotal);\n\n      if (cartProducts.length > 0) {\n        const response = await getStripe(cartTotal, cartProducts);\n\n        if (response.error) {\n          this.setState({\n            client_error: response.error\n          });\n        } else if (response.data) {\n          this.setState({\n            client_secret: response.data\n          });\n        }\n      }\n    };\n\n    this.handleSubmit = async event => {\n      // We don't want to let default form submission happen here,\n      // which would refresh the page.\n      event.preventDefault();\n      const _this$props2 = this.props,\n            stripe = _this$props2.stripe,\n            elements = _this$props2.elements,\n            cartProducts = _this$props2.cartProducts,\n            cartTotal = _this$props2.cartTotal;\n      const _this$state = this.state,\n            name = _this$state.name,\n            phone = _this$state.phone,\n            email = _this$state.email,\n            line1 = _this$state.line1,\n            city = _this$state.city,\n            state = _this$state.state,\n            zip = _this$state.zip,\n            client_secret = _this$state.client_secret;\n\n      if (!stripe || !elements) {\n        // Stripe.js has not yet loaded.\n        // Make  sure to disable form submission until Stripe.js has loaded.\n        return;\n      }\n\n      const result = await stripe.confirmCardPayment(client_secret, {\n        payment_method: {\n          card: elements.getElement(CardElement),\n          billing_details: {\n            name: name,\n            phone: phone,\n            email: email\n          }\n        },\n        shipping: {\n          name: name,\n          address: {\n            line1: line1,\n            city: city,\n            state: state,\n            postal_code: zip\n          }\n        }\n      });\n\n      if (result.error) {\n        // Show error to your customer (e.g., insufficient funds)\n        console.log(result.error.message);\n      } else {\n        // The payment has been processed!\n        if (result.paymentIntent.status === 'succeeded') {\n          // Show a success message to your customer\n          // There's a risk of the customer closing the window before callback\n          // execution. Set up a webhook or plugin to listen for the\n          // payment_intent.succeeded event that handles any business critical\n          // post-payment actions.\n          // const storeOrder = await axios.post('/shop/checkout/success');\n          // storeOrder\n          //   .then()\n          //   .catch()\n          const response = await storeOrder(result.paymentIntent, cartProducts, cartTotal, name, phone, email);\n\n          if (response.error) {\n            this.setState({\n              client_error: response.error\n            });\n          } else if (response.data) {\n            localStorage.removeItem('cartTotal');\n            localStorage.removeItem('cartProducts');\n            cartProducts.forEach((item, i) => {\n              delete item[i];\n            });\n            cartTotal;\n            this.setState({\n              order_completed: true,\n              orderId: response.data.chargeId\n            }); // history.push(`confirmation/${response.data.chargeId}`);\n          }\n        }\n      }\n    };\n\n    this.handleInputChange = event => {\n      const target = event.target;\n      const value = target.value;\n      const name = target.name;\n      this.setState({\n        [name]: value\n      });\n    };\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          name = _this$state2.name,\n          phone = _this$state2.phone,\n          email = _this$state2.email,\n          line1 = _this$state2.line1,\n          city = _this$state2.city,\n          state = _this$state2.state,\n          zip = _this$state2.zip,\n          client_secret = _this$state2.client_secret,\n          client_error = _this$state2.client_error,\n          order_completed = _this$state2.order_completed,\n          orderId = _this$state2.orderId;\n    const _this$props3 = this.props,\n          cartTotal = _this$props3.cartTotal,\n          cartProducts = _this$props3.cartProducts;\n\n    if (order_completed) {\n      const description = `Your confirmation number is ${orderId}.\n      Check your email for details. If you have any questions or\n      concerns regarding your order please feel free to contact us.`;\n      return React.createElement(Modal, {\n        showValue: true,\n        closeDirect: \"/\",\n        buttonName: \"OK\",\n        historyPush: true,\n        title: `Thank You ${name}!`,\n        description: description,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      });\n    }\n\n    if (cartProducts.length <= 0) {\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, \"Cart is empty\");\n    }\n\n    if (client_secret === '') {\n      if (client_error) {\n        return React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160\n          },\n          __self: this\n        }, \"We have a problem :(\");\n      } else {\n        return React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162\n          },\n          __self: this\n        });\n      }\n    }\n\n    return React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-md-4 order-md-2 mb-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(CartSection, {\n      cartTotal: cartTotal,\n      cartProducts: cartProducts,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"col-md-8 order-md-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(IdentitySection, {\n      name: name,\n      phone: phone,\n      email: email,\n      handleInputChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }), React.createElement(AddressSection, {\n      line1: line1,\n      city: city,\n      state: state,\n      zip: zip,\n      handleInputChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }), React.createElement(CardSection, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      disabled: !this.props.stripe,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, \"Confirm order\"))));\n  }\n\n}\n\nconst InjectedCheckoutForm = ({\n  cartProducts,\n  cartTotal\n}) => {\n  return React.createElement(ElementsConsumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, ({\n    stripe,\n    elements\n  }) => React.createElement(CheckoutForm, {\n    stripe: stripe,\n    elements: elements,\n    cartProducts: cartProducts,\n    cartTotal: cartTotal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = state => ({\n  cartTotal: state.total.data,\n  cartProducts: state.cart.products\n});\n\nexport default connect(mapStateToProps, {})(InjectedCheckoutForm);","map":{"version":3,"sources":["C:/Users/John/Desktop/Modern React With Redux Projects/beersandbrewskies/beersandbrewskies/src/components/shop/components/checkout/index.js"],"names":["React","ElementsConsumer","CardElement","connect","CardSection","IdentitySection","AddressSection","Spinner","CartSection","getLocalStorageUpdateCart","getStripe","storeOrder","history","Modal","CheckoutForm","Component","state","name","email","phone","line1","city","zip","client_secret","client_error","order_completed","orderId","componentDidMount","props","cartTotal","cartProducts","length","response","error","setState","data","handleSubmit","event","preventDefault","stripe","elements","result","confirmCardPayment","payment_method","card","getElement","billing_details","shipping","address","postal_code","console","log","message","paymentIntent","status","localStorage","removeItem","forEach","item","i","chargeId","handleInputChange","target","value","render","description","InjectedCheckoutForm","mapStateToProps","total","cart","products"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {ElementsConsumer, CardElement} from '@stripe/react-stripe-js';\r\nimport { connect } from 'react-redux';\r\nimport CardSection from './components/CardSection';\r\nimport IdentitySection from './components/IdentitySection';\r\nimport AddressSection from './components/AddressSection';\r\nimport './css/CheckoutFormStyles.css';\r\nimport Spinner from '../../../spinner'\r\nimport CartSection from './components/CartSection';\r\nimport { getLocalStorageUpdateCart } from '../util';\r\nimport { getStripe, storeOrder } from '../../../../services/order/actions';\r\nimport history from '../../../../history';\r\nimport Modal from '../../../Modal';\r\n\r\nclass CheckoutForm extends React.Component {\r\n\r\n  state = {\r\n    name: '',\r\n    email: '',\r\n    phone: '',\r\n    line1: '',\r\n    city: '',\r\n    state: '',\r\n    zip: '',\r\n    client_secret: '',\r\n    client_error: false,\r\n    order_completed: true,\r\n    orderId: ''\r\n  }\r\n\r\n  componentDidMount = async() => {\r\n    const {cartTotal, cartProducts} = this.props;\r\n    getLocalStorageUpdateCart(cartProducts, cartTotal);\r\n    if(cartProducts.length > 0 ){\r\n      const response = await getStripe(cartTotal, cartProducts);\r\n\r\n      if(response.error){\r\n        this.setState({client_error: response.error});\r\n      }else if (response.data){\r\n        this.setState({client_secret: response.data});\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  handleSubmit = async (event) => {\r\n    // We don't want to let default form submission happen here,\r\n    // which would refresh the page.\r\n    event.preventDefault();\r\n\r\n    const {stripe, elements, cartProducts, cartTotal} = this.props\r\n    const {name, phone, email, line1, city, state, zip, client_secret} = this.state;\r\n\r\n    if (!stripe || !elements) {\r\n      // Stripe.js has not yet loaded.\r\n      // Make  sure to disable form submission until Stripe.js has loaded.\r\n      return;\r\n    }\r\n\r\n    const result = await stripe.confirmCardPayment(client_secret, {\r\n      payment_method: {\r\n        card: elements.getElement(CardElement),\r\n        billing_details: {\r\n          name: name,\r\n          phone: phone,\r\n          email: email\r\n        },\r\n      },\r\n      shipping: {\r\n        name: name,\r\n        address: {\r\n          line1: line1,\r\n          city: city,\r\n          state: state,\r\n          postal_code: zip\r\n        }\r\n      }\r\n    });\r\n\r\n    if (result.error) {\r\n      // Show error to your customer (e.g., insufficient funds)\r\n      console.log(result.error.message);\r\n    } else {\r\n      // The payment has been processed!\r\n      if (result.paymentIntent.status === 'succeeded') {\r\n        // Show a success message to your customer\r\n        // There's a risk of the customer closing the window before callback\r\n        // execution. Set up a webhook or plugin to listen for the\r\n        // payment_intent.succeeded event that handles any business critical\r\n        // post-payment actions.\r\n\r\n        // const storeOrder = await axios.post('/shop/checkout/success');\r\n        // storeOrder\r\n        //   .then()\r\n        //   .catch()\r\n\r\n        const response = await storeOrder(\r\n          result.paymentIntent,\r\n          cartProducts,\r\n          cartTotal,\r\n          name,\r\n          phone,\r\n          email);\r\n\r\n          if(response.error){\r\n            this.setState({client_error: response.error});\r\n          }else if(response.data){\r\n            localStorage.removeItem('cartTotal');\r\n            localStorage.removeItem('cartProducts');\r\n            cartProducts.forEach((item, i) => {\r\n              delete item[i]\r\n            });\r\n\r\n            cartTotal\r\n            this.setState({ order_completed: true, orderId: response.data.chargeId });\r\n            // history.push(`confirmation/${response.data.chargeId}`);\r\n          }\r\n\r\n      }\r\n    }\r\n  };\r\n\r\n  handleInputChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { name, phone, email, line1, city, state, zip, client_secret, client_error, order_completed, orderId } = this.state;\r\n    const { cartTotal, cartProducts } = this.props;\r\n\r\n    if(order_completed){\r\n      const description = `Your confirmation number is ${orderId}.\r\n      Check your email for details. If you have any questions or\r\n      concerns regarding your order please feel free to contact us.`;\r\n\r\n      return(\r\n        <Modal\r\n        showValue={true}\r\n        closeDirect = '/'\r\n        buttonName = 'OK'\r\n        historyPush = {true}\r\n        title={`Thank You ${name}!`}\r\n        description= {description}\r\n        />\r\n      )\r\n    }\r\n\r\n    if(cartProducts.length <= 0) {\r\n      return <h1>Cart is empty</h1>;\r\n    }\r\n\r\n    if(client_secret === ''){\r\n      if(client_error){\r\n        return <h1>We have a problem :(</h1>;\r\n      }else{\r\n        return <Spinner />;\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className=\"row\">\r\n      <div className=\"col-md-4 order-md-2 mb-4\">\r\n        <CartSection cartTotal={cartTotal} cartProducts={cartProducts} />\r\n      </div>\r\n      <div className=\"col-md-8 order-md-1\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <IdentitySection name={name} phone={phone} email={email} handleInputChange={this.handleInputChange}/>\r\n          <AddressSection line1={line1} city={city} state={state} zip={zip} handleInputChange={this.handleInputChange} />\r\n          <CardSection />\r\n          <button className=\"btn btn-primary\" disabled={!this.props.stripe}>Confirm order</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst InjectedCheckoutForm = ({cartProducts, cartTotal}) => {\r\n  return (\r\n    <ElementsConsumer>\r\n      {({stripe, elements}) => (\r\n        <CheckoutForm  stripe={stripe}\r\n          elements={elements}\r\n          cartProducts={cartProducts}\r\n          cartTotal={cartTotal}\r\n          />\r\n      )}\r\n    </ElementsConsumer>\r\n  );\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  cartTotal: state.total.data,\r\n  cartProducts: state.cart.products\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(InjectedCheckoutForm);\r\n"]},"metadata":{},"sourceType":"module"}