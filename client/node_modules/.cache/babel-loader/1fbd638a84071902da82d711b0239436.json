{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John\\\\Desktop\\\\Modern React With Redux Projects\\\\beersandbrewskies\\\\beersandbrewskies\\\\src\\\\components\\\\shop\\\\components\\\\checkout\\\\index.js\";\nimport React from 'react';\nimport { ElementsConsumer, CardElement } from '@stripe/react-stripe-js';\nimport CardSection from './components/CardSection';\nimport IdentitySection from './components/IdentitySection';\nimport AddressSection from './components/AddressSection';\nimport './css/CheckoutFormStyles.css';\nimport axios from 'axios';\nimport Spinner from '../../spinner';\n\nclass CheckoutForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      name: '',\n      email: '',\n      phone: '',\n      line1: '',\n      city: '',\n      state: '',\n      zip: '',\n      client_secret: ''\n    };\n\n    this.componentDidMount = async () => {// let response;\n      // try {\n      //  response = await axios.get('/shop/checkout');\n      // } catch (e) {\n      // return console.log(e);\n      // }\n      //\n      // if(response.data){\n      //   this.setState({client_secret: response.data})\n      // }\n    };\n\n    this.handleSubmit = async event => {\n      // We don't want to let default form submission happen here,\n      // which would refresh the page.\n      event.preventDefault();\n      console.log(\"Called\");\n      const _this$props = this.props,\n            stripe = _this$props.stripe,\n            elements = _this$props.elements;\n\n      if (!stripe || !elements) {\n        // Stripe.js has not yet loaded.\n        // Make  sure to disable form submission until Stripe.js has loaded.\n        return;\n      }\n\n      const result = await stripe.confirmCardPayment(this.state.client_secret, {\n        payment_method: {\n          card: elements.getElement(CardElement),\n          billing_details: {\n            name: 'Jenny Rosen'\n          }\n        }\n      });\n\n      if (result.error) {\n        // Show error to your customer (e.g., insufficient funds)\n        console.log(result.error.message);\n      } else {\n        // The payment has been processed!\n        if (result.paymentIntent.status === 'succeeded') {// Show a success message to your customer\n          // There's a risk of the customer closing the window before callback\n          // execution. Set up a webhook or plugin to listen for the\n          // payment_intent.succeeded event that handles any business critical\n          // post-payment actions.\n        }\n      }\n    };\n\n    this.handleInputChange = event => {\n      const target = event.target;\n      const value = target.value;\n      const name = target.name;\n      this.setState({\n        [name]: value\n      });\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          name = _this$state.name,\n          phone = _this$state.phone,\n          email = _this$state.email,\n          line1 = _this$state.line1,\n          city = _this$state.city,\n          state = _this$state.state,\n          zip = _this$state.zip;\n\n    if (this.state.client_secret === '') {\n      return React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(IdentitySection, {\n      name: name,\n      phone: phone,\n      email: email,\n      handleInputChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), React.createElement(AddressSection, {\n      line1: line1,\n      city: city,\n      state: state,\n      zip: zip,\n      handleInputChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(CardSection, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      disabled: !this.props.stripe,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Confirm order\")));\n  }\n\n}\n\nexport default function InjectedCheckoutForm() {\n  return React.createElement(ElementsConsumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, ({\n    stripe,\n    elements\n  }) => React.createElement(CheckoutForm, {\n    stripe: stripe,\n    elements: elements,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["C:/Users/John/Desktop/Modern React With Redux Projects/beersandbrewskies/beersandbrewskies/src/components/shop/components/checkout/index.js"],"names":["React","ElementsConsumer","CardElement","CardSection","IdentitySection","AddressSection","axios","Spinner","CheckoutForm","Component","state","name","email","phone","line1","city","zip","client_secret","componentDidMount","handleSubmit","event","preventDefault","console","log","props","stripe","elements","result","confirmCardPayment","payment_method","card","getElement","billing_details","error","message","paymentIntent","status","handleInputChange","target","value","setState","render","InjectedCheckoutForm"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {ElementsConsumer, CardElement} from '@stripe/react-stripe-js';\r\n\r\nimport CardSection from './components/CardSection';\r\nimport IdentitySection from './components/IdentitySection';\r\nimport AddressSection from './components/AddressSection';\r\nimport './css/CheckoutFormStyles.css';\r\nimport axios from 'axios';\r\nimport Spinner from '../../spinner'\r\n\r\nclass CheckoutForm extends React.Component {\r\n\r\n  state = {\r\n    name: '',\r\n    email: '',\r\n    phone: '',\r\n    line1: '',\r\n    city: '',\r\n    state: '',\r\n    zip: '',\r\n    client_secret: '',\r\n  }\r\n\r\n  componentDidMount = async() => {\r\n    // let response;\r\n    // try {\r\n    //  response = await axios.get('/shop/checkout');\r\n    // } catch (e) {\r\n    // return console.log(e);\r\n    // }\r\n    //\r\n    // if(response.data){\r\n    //   this.setState({client_secret: response.data})\r\n    // }\r\n\r\n  }\r\n\r\n  handleSubmit = async (event) => {\r\n    // We don't want to let default form submission happen here,\r\n    // which would refresh the page.\r\n    event.preventDefault();\r\n\r\n    console.log(\"Called\");\r\n\r\n    const {stripe, elements} = this.props\r\n\r\n    if (!stripe || !elements) {\r\n      // Stripe.js has not yet loaded.\r\n      // Make  sure to disable form submission until Stripe.js has loaded.\r\n      return;\r\n    }\r\n\r\n    const result = await stripe.confirmCardPayment(this.state.client_secret, {\r\n      payment_method: {\r\n        card: elements.getElement(CardElement),\r\n        billing_details: {\r\n          name: 'Jenny Rosen',\r\n        },\r\n      }\r\n    });\r\n\r\n    if (result.error) {\r\n      // Show error to your customer (e.g., insufficient funds)\r\n      console.log(result.error.message);\r\n    } else {\r\n      // The payment has been processed!\r\n      if (result.paymentIntent.status === 'succeeded') {\r\n        // Show a success message to your customer\r\n        // There's a risk of the customer closing the window before callback\r\n        // execution. Set up a webhook or plugin to listen for the\r\n        // payment_intent.succeeded event that handles any business critical\r\n        // post-payment actions.\r\n      }\r\n    }\r\n  };\r\n\r\n  handleInputChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {name, phone, email, line1, city, state, zip} = this.state;\r\n    if(this.state.client_secret === ''){\r\n      return <Spinner />;\r\n    }\r\n    return (\r\n      <div className=\"container\">\r\n      <form onSubmit={this.handleSubmit}>\r\n        <IdentitySection name={name} phone={phone} email={email} handleInputChange={this.handleInputChange}/>\r\n        <AddressSection line1={line1} city={city} state={state} zip={zip} handleInputChange={this.handleInputChange} />\r\n        <CardSection />\r\n        <button className=\"btn btn-primary\" disabled={!this.props.stripe}>Confirm order</button>\r\n      </form>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default function InjectedCheckoutForm() {\r\n  return (\r\n    <ElementsConsumer>\r\n      {({stripe, elements}) => (\r\n        <CheckoutForm  stripe={stripe} elements={elements} />\r\n      )}\r\n    </ElementsConsumer>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}