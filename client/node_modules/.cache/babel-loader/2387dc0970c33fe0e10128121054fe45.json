{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John\\\\Desktop\\\\Modern React With Redux Projects\\\\beersandbrewskies\\\\beersandbrewskies\\\\src\\\\components\\\\shop\\\\components\\\\FloatCart.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { loadCart, removeProduct, changeProductQuantity } from '../../../actions';\n\nclass FloatCart extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.addProduct = product => {\n      const cartProducts = this.props.cartProducts;\n      let productAlreadyInCart = false;\n      cartProducts.forEach(cp => {\n        if (cp.id === product.id) {\n          cp.quantity += product.quantity;\n          productAlreadyInCart = true;\n        }\n      });\n\n      if (!productAlreadyInCart) {\n        cartProducts.push(product);\n      }\n\n      console.log(cartProducts);\n    };\n\n    this.removeProduct = product => {\n      const cartProducts = this.props.cartProducts;\n      const index = cartProducts.findIndex(p => p.id === product.id);\n\n      if (index >= 0) {\n        cartProducts.splice(index, 1);\n      }\n\n      console.log(cartProducts);\n    };\n\n    this.changeProductQuantity = () => {};\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.newProduct !== this.props.newProduct) {\n      this.addProduct(this.props.newProduct);\n    }\n\n    if (prevProps.productToRemove !== this.props.productToRemove) {\n      this.removeProduct(this.props.newProduct);\n    }\n\n    if (prevProps.productToChange !== this.props.productToChange) {\n      this.changeProductQuantity(this.props.newProduct);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"FloatCart\");\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    cartProducts: state.cart.products,\n    newProduct: state.cart.productToAdd,\n    productToRemove: state.cart.productToRemove,\n    productToChange: state.cart.productToChange\n  };\n};\n\nexport default connect(mapStateToProps, {})(FloatCart);","map":{"version":3,"sources":["C:/Users/John/Desktop/Modern React With Redux Projects/beersandbrewskies/beersandbrewskies/src/components/shop/components/FloatCart.js"],"names":["React","connect","loadCart","removeProduct","changeProductQuantity","FloatCart","Component","addProduct","product","cartProducts","props","productAlreadyInCart","forEach","cp","id","quantity","push","console","log","index","findIndex","p","splice","componentDidUpdate","prevProps","newProduct","productToRemove","productToChange","render","mapStateToProps","state","cart","products","productToAdd"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SACEC,QADF,EAEEC,aAFF,EAGEC,qBAHF,QAIO,kBAJP;;AAMA,MAAMC,SAAN,SAAwBL,KAAK,CAACM,SAA9B,CAAwC;AAAA;AAAA;;AAAA,SAgBtCC,UAhBsC,GAgBxBC,OAAD,IAAa;AAAA,YAChBC,YADgB,GACA,KAAKC,KADL,CAChBD,YADgB;AAExB,UAAIE,oBAAoB,GAAG,KAA3B;AAEAF,MAAAA,YAAY,CAACG,OAAb,CAAqBC,EAAE,IAAI;AACzB,YAAIA,EAAE,CAACC,EAAH,KAAUN,OAAO,CAACM,EAAtB,EAA0B;AACxBD,UAAAA,EAAE,CAACE,QAAH,IAAeP,OAAO,CAACO,QAAvB;AACAJ,UAAAA,oBAAoB,GAAG,IAAvB;AACD;AACF,OALD;;AAOA,UAAI,CAACA,oBAAL,EAA2B;AACzBF,QAAAA,YAAY,CAACO,IAAb,CAAkBR,OAAlB;AACD;;AAEDS,MAAAA,OAAO,CAACC,GAAR,CAAYT,YAAZ;AACD,KAhCqC;;AAAA,SAkCtCN,aAlCsC,GAkCrBK,OAAD,IAAa;AAAA,YACnBC,YADmB,GACF,KAAKC,KADH,CACnBD,YADmB;AAG3B,YAAMU,KAAK,GAAGV,YAAY,CAACW,SAAb,CAAuBC,CAAC,IAAIA,CAAC,CAACP,EAAF,KAASN,OAAO,CAACM,EAA7C,CAAd;;AACA,UAAIK,KAAK,IAAI,CAAb,EAAgB;AACdV,QAAAA,YAAY,CAACa,MAAb,CAAoBH,KAApB,EAA2B,CAA3B;AACD;;AACDF,MAAAA,OAAO,CAACC,GAAR,CAAYT,YAAZ;AACD,KA1CqC;;AAAA,SA4CtCL,qBA5CsC,GA4Cd,MAAM,CAE7B,CA9CqC;AAAA;;AACtCmB,EAAAA,kBAAkB,CAACC,SAAD,EAAW;AAC3B,QAAIA,SAAS,CAACC,UAAV,KAAyB,KAAKf,KAAL,CAAWe,UAAxC,EAAoD;AAClD,WAAKlB,UAAL,CAAgB,KAAKG,KAAL,CAAWe,UAA3B;AACD;;AAED,QAAID,SAAS,CAACE,eAAV,KAA8B,KAAKhB,KAAL,CAAWgB,eAA7C,EAA8D;AAC5D,WAAKvB,aAAL,CAAmB,KAAKO,KAAL,CAAWe,UAA9B;AACD;;AAED,QAAID,SAAS,CAACG,eAAV,KAA8B,KAAKjB,KAAL,CAAWiB,eAA7C,EAA8D;AAC5D,WAAKvB,qBAAL,CAA2B,KAAKM,KAAL,CAAWe,UAAtC;AACD;AAEF;;AAkCDG,EAAAA,MAAM,GAAE;AACN,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF;AAGD;;AApDqC;;AAuDxC,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLrB,IAAAA,YAAY,EAAEqB,KAAK,CAACC,IAAN,CAAWC,QADpB;AAELP,IAAAA,UAAU,EAAEK,KAAK,CAACC,IAAN,CAAWE,YAFlB;AAGLP,IAAAA,eAAe,EAAEI,KAAK,CAACC,IAAN,CAAWL,eAHvB;AAILC,IAAAA,eAAe,EAAEG,KAAK,CAACC,IAAN,CAAWJ;AAJvB,GAAP;AAMD,CAPD;;AAUA,eAAe1B,OAAO,CAAC4B,eAAD,EAAiB,EAAjB,CAAP,CAA4BxB,SAA5B,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  loadCart,\r\n  removeProduct,\r\n  changeProductQuantity\r\n} from '../../../actions';\r\n\r\nclass FloatCart extends React.Component {\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps.newProduct !== this.props.newProduct) {\r\n      this.addProduct(this.props.newProduct);\r\n    }\r\n\r\n    if (prevProps.productToRemove !== this.props.productToRemove) {\r\n      this.removeProduct(this.props.newProduct);\r\n    }\r\n\r\n    if (prevProps.productToChange !== this.props.productToChange) {\r\n      this.changeProductQuantity(this.props.newProduct);\r\n    }\r\n\r\n  }\r\n\r\n  addProduct = (product) => {\r\n    const { cartProducts} = this.props;\r\n    let productAlreadyInCart = false;\r\n\r\n    cartProducts.forEach(cp => {\r\n      if (cp.id === product.id) {\r\n        cp.quantity += product.quantity;\r\n        productAlreadyInCart = true;\r\n      }\r\n    });\r\n\r\n    if (!productAlreadyInCart) {\r\n      cartProducts.push(product);\r\n    }\r\n\r\n    console.log(cartProducts);\r\n  }\r\n\r\n  removeProduct = (product) => {\r\n    const { cartProducts } = this.props;\r\n\r\n    const index = cartProducts.findIndex(p => p.id === product.id);\r\n    if (index >= 0) {\r\n      cartProducts.splice(index, 1);\r\n    }\r\n    console.log(cartProducts);\r\n  }\r\n\r\n  changeProductQuantity = () => {\r\n\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div>FloatCart</div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    cartProducts: state.cart.products,\r\n    newProduct: state.cart.productToAdd,\r\n    productToRemove: state.cart.productToRemove,\r\n    productToChange: state.cart.productToChange,\r\n  }\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps,{})(FloatCart);\r\n"]},"metadata":{},"sourceType":"module"}