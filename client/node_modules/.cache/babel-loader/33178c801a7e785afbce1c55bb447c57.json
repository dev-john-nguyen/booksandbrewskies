{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\John\\\\Desktop\\\\Modern React With Redux Projects\\\\beersandbrewskies\\\\beersandbrewskies\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\Users\\\\John\\\\Desktop\\\\Modern React With Redux Projects\\\\beersandbrewskies\\\\beersandbrewskies\\\\src\\\\components\\\\shop\\\\components\\\\checkout\\\\index.js\";\nimport React from 'react';\nimport { ElementsConsumer, CardElement } from '@stripe/react-stripe-js';\nimport './CheckoutFormStyles.css';\nimport CardSection from './components/CardSection';\n\nclass CheckoutForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSubmit = async event => {\n      // We don't want to let default form submission happen here,\n      // which would refresh the page.\n      event.preventDefault();\n      console.log(\"Called\");\n      return;\n      const _this$props = this.props,\n            stripe = _this$props.stripe,\n            elements = _this$props.elements;\n\n      if (!stripe || !elements) {\n        // Stripe.js has not yet loaded.\n        // Make  sure to disable form submission until Stripe.js has loaded.\n        return;\n      }\n\n      const result = await stripe.confirmCardPayment('{CLIENT_SECRET}', {\n        payment_method: {\n          card: elements.getElement(CardElement),\n          billing_details: {\n            name: 'Jenny Rosen'\n          }\n        }\n      });\n\n      if (result.error) {\n        // Show error to your customer (e.g., insufficient funds)\n        console.log(result.error.message);\n      } else {\n        // The payment has been processed!\n        if (result.paymentIntent.status === 'succeeded') {// Show a success message to your customer\n          // There's a risk of the customer closing the window before callback\n          // execution. Set up a webhook or plugin to listen for the\n          // payment_intent.succeeded event that handles any business critical\n          // post-payment actions.\n        }\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"fieldset\", {\n      className: \"FormGroup\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Field, {\n      label: \"Name\",\n      id: \"name\",\n      type: \"text\",\n      placeholder: \"Jane Doe\",\n      required: true,\n      autoComplete: \"name\",\n      value: billingDetails.name,\n      onChange: e => {\n        setBillingDetails(_objectSpread({}, billingDetails, {\n          name: e.target.value\n        }));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(Field, {\n      label: \"Email\",\n      id: \"email\",\n      type: \"email\",\n      placeholder: \"janedoe@gmail.com\",\n      required: true,\n      autoComplete: \"email\",\n      value: billingDetails.email,\n      onChange: e => {\n        setBillingDetails(_objectSpread({}, billingDetails, {\n          email: e.target.value\n        }));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(Field, {\n      label: \"Phone\",\n      id: \"phone\",\n      type: \"tel\",\n      placeholder: \"(941) 555-0123\",\n      required: true,\n      autoComplete: \"tel\",\n      value: billingDetails.phone,\n      onChange: e => {\n        setBillingDetails(_objectSpread({}, billingDetails, {\n          phone: e.target.value\n        }));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    })), React.createElement(\"fieldset\", {\n      className: \"FormGroup\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(CardSection, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      disabled: !this.props.stripe,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Confirm order\"));\n  }\n\n}\n\nexport default function InjectedCheckoutForm() {\n  return React.createElement(ElementsConsumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, ({\n    stripe,\n    elements\n  }) => React.createElement(CheckoutForm, {\n    stripe: stripe,\n    elements: elements,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["C:/Users/John/Desktop/Modern React With Redux Projects/beersandbrewskies/beersandbrewskies/src/components/shop/components/checkout/index.js"],"names":["React","ElementsConsumer","CardElement","CardSection","CheckoutForm","Component","handleSubmit","event","preventDefault","console","log","props","stripe","elements","result","confirmCardPayment","payment_method","card","getElement","billing_details","name","error","message","paymentIntent","status","render","billingDetails","e","setBillingDetails","target","value","email","phone","InjectedCheckoutForm"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {ElementsConsumer, CardElement} from '@stripe/react-stripe-js';\r\nimport './CheckoutFormStyles.css';\r\nimport CardSection from './components/CardSection';\r\n\r\nclass CheckoutForm extends React.Component {\r\n  handleSubmit = async (event) => {\r\n    // We don't want to let default form submission happen here,\r\n    // which would refresh the page.\r\n    event.preventDefault();\r\n\r\n    console.log(\"Called\");\r\n    return;\r\n    const {stripe, elements} = this.props\r\n\r\n    if (!stripe || !elements) {\r\n      // Stripe.js has not yet loaded.\r\n      // Make  sure to disable form submission until Stripe.js has loaded.\r\n      return;\r\n    }\r\n\r\n    const result = await stripe.confirmCardPayment('{CLIENT_SECRET}', {\r\n      payment_method: {\r\n        card: elements.getElement(CardElement),\r\n        billing_details: {\r\n          name: 'Jenny Rosen',\r\n        },\r\n      }\r\n    });\r\n\r\n    if (result.error) {\r\n      // Show error to your customer (e.g., insufficient funds)\r\n      console.log(result.error.message);\r\n    } else {\r\n      // The payment has been processed!\r\n      if (result.paymentIntent.status === 'succeeded') {\r\n        // Show a success message to your customer\r\n        // There's a risk of the customer closing the window before callback\r\n        // execution. Set up a webhook or plugin to listen for the\r\n        // payment_intent.succeeded event that handles any business critical\r\n        // post-payment actions.\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <fieldset className=\"FormGroup\">\r\n      <Field\r\n        label=\"Name\"\r\n        id=\"name\"\r\n        type=\"text\"\r\n        placeholder=\"Jane Doe\"\r\n        required\r\n        autoComplete=\"name\"\r\n        value={billingDetails.name}\r\n        onChange={(e) => {\r\n          setBillingDetails({...billingDetails, name: e.target.value});\r\n        }}\r\n      />\r\n      <Field\r\n        label=\"Email\"\r\n        id=\"email\"\r\n        type=\"email\"\r\n        placeholder=\"janedoe@gmail.com\"\r\n        required\r\n        autoComplete=\"email\"\r\n        value={billingDetails.email}\r\n        onChange={(e) => {\r\n          setBillingDetails({...billingDetails, email: e.target.value});\r\n        }}\r\n      />\r\n      <Field\r\n        label=\"Phone\"\r\n        id=\"phone\"\r\n        type=\"tel\"\r\n        placeholder=\"(941) 555-0123\"\r\n        required\r\n        autoComplete=\"tel\"\r\n        value={billingDetails.phone}\r\n        onChange={(e) => {\r\n          setBillingDetails({...billingDetails, phone: e.target.value});\r\n        }}\r\n      />\r\n    </fieldset>\r\n    <fieldset className=\"FormGroup\">\r\n        <CardSection />\r\n         </fieldset>\r\n        <button disabled={!this.props.stripe}>Confirm order</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default function InjectedCheckoutForm() {\r\n  return (\r\n    <ElementsConsumer>\r\n      {({stripe, elements}) => (\r\n        <CheckoutForm  stripe={stripe} elements={elements} />\r\n      )}\r\n    </ElementsConsumer>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}