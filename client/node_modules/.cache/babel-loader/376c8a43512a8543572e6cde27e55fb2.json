{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John\\\\Desktop\\\\Modern React With Redux Projects\\\\beersandbrewskies\\\\beersandbrewskies\\\\src\\\\components\\\\shop\\\\components\\\\checkout\\\\components\\\\ProductList.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { loadCart, removeProduct, changeProductQuantity } from '../../../../../services/cart/actions';\nimport { updateCart } from '../../../../../services/total/actions';\nimport Product from './Product';\nimport { formatPrice } from '../../util';\n\nclass ProductList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      newProduct: this.props.newProduct,\n      productToChange: this.props.productToChange,\n      productToRemove: this.props.productToRemove\n    };\n\n    this.addProduct = product => {\n      const _this$props = this.props,\n            cartProducts = _this$props.cartProducts,\n            updateCart = _this$props.updateCart;\n      let productAlreadyInCart = false;\n      cartProducts.forEach(cp => {\n        if (cp.id === product.id) {\n          cp.quantity += product.quantity;\n          productAlreadyInCart = true;\n        }\n      });\n\n      if (!productAlreadyInCart) {\n        cartProducts.push(product);\n      }\n\n      updateCart(cartProducts);\n      this.openFloatCart();\n    };\n\n    this.removeProduct = product => {\n      const _this$props2 = this.props,\n            cartProducts = _this$props2.cartProducts,\n            updateCart = _this$props2.updateCart;\n      const index = cartProducts.findIndex(p => p.id === product.id);\n\n      if (index >= 0) {\n        cartProducts.splice(index, 1);\n        updateCart(cartProducts);\n      }\n    };\n\n    this.proceedToCheckout = () => {\n      const _this$props$cartTotal = this.props.cartTotal,\n            totalPrice = _this$props$cartTotal.totalPrice,\n            productQuantity = _this$props$cartTotal.productQuantity,\n            currencyFormat = _this$props$cartTotal.currencyFormat,\n            currencyId = _this$props$cartTotal.currencyId;\n\n      if (!productQuantity) {\n        alert('Add some product in the cart!');\n      } else {\n        alert(`Checkout - Subtotal: ${currencyFormat} ${formatPrice(totalPrice, currencyId)}`);\n      }\n    };\n\n    this.changeProductQuantity = changedProduct => {\n      const _this$props3 = this.props,\n            cartProducts = _this$props3.cartProducts,\n            updateCart = _this$props3.updateCart;\n      const product = cartProducts.find(p => p.id === changedProduct.id);\n      product.quantity = changedProduct.quantity;\n\n      if (product.quantity <= 0) {\n        this.removeProduct(product);\n      }\n\n      updateCart(cartProducts);\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.newProduct !== prevState.newProduct) {\n      return {\n        newProduct: nextProps.newProduct\n      };\n    }\n\n    if (nextProps.productToRemove !== prevState.productToRemove) {\n      return {\n        productToRemove: nextProps.productToRemove\n      };\n    }\n\n    if (nextProps.productToChange !== prevState.productToChange) {\n      return {\n        productToChange: nextProps.productToChange\n      };\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.newProduct !== this.state.newProduct) {\n      this.addProduct(this.state.newProduct);\n    }\n\n    if (prevState.productToRemove !== this.state.productToRemove) {\n      this.removeProduct(this.state.productToRemove);\n    }\n\n    if (prevState.productToChange !== this.state.productToChange) {\n      this.changeProductQuantity(this.state.productToChange);\n    }\n  }\n\n  render() {\n    const _this$props4 = this.props,\n          cartTotal = _this$props4.cartTotal,\n          cartProducts = _this$props4.cartProducts,\n          removeProduct = _this$props4.removeProduct,\n          changeProductQuantity = _this$props4.changeProductQuantity;\n    const products = cartProducts.map(p => {\n      return React.createElement(Product, {\n        product: p,\n        removeProduct: removeProduct,\n        changeProductQuantity: changeProductQuantity,\n        key: p.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"This is the list of products\", products);\n  }\n\n}\n\nProductList.propTypes = {\n  loadCart: PropTypes.func.isRequired,\n  updateCart: PropTypes.func.isRequired,\n  cartProducts: PropTypes.array.isRequired,\n  newProduct: PropTypes.object,\n  removeProduct: PropTypes.func,\n  productToRemove: PropTypes.object,\n  changeProductQuantity: PropTypes.func,\n  productToChange: PropTypes.object\n};\n\nconst mapStateToProps = state => ({\n  cartProducts: state.cart.products,\n  newProduct: state.cart.productToAdd,\n  productToRemove: state.cart.productToRemove,\n  productToChange: state.cart.productToChange,\n  cartTotal: state.total.data\n});\n\nexport default connect(mapStateToProps, {\n  loadCart,\n  updateCart,\n  removeProduct,\n  changeProductQuantity\n})(ProductList);","map":{"version":3,"sources":["C:/Users/John/Desktop/Modern React With Redux Projects/beersandbrewskies/beersandbrewskies/src/components/shop/components/checkout/components/ProductList.js"],"names":["React","Component","PropTypes","connect","loadCart","removeProduct","changeProductQuantity","updateCart","Product","formatPrice","ProductList","state","newProduct","props","productToChange","productToRemove","addProduct","product","cartProducts","productAlreadyInCart","forEach","cp","id","quantity","push","openFloatCart","index","findIndex","p","splice","proceedToCheckout","cartTotal","totalPrice","productQuantity","currencyFormat","currencyId","alert","changedProduct","find","getDerivedStateFromProps","nextProps","prevState","componentDidUpdate","prevProps","render","products","map","propTypes","func","isRequired","array","object","mapStateToProps","cart","productToAdd","total","data"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { loadCart, removeProduct, changeProductQuantity } from '../../../../../services/cart/actions';\r\nimport { updateCart } from '../../../../../services/total/actions';\r\nimport Product from './Product';\r\nimport { formatPrice } from '../../util';\r\n\r\nclass ProductList extends Component {\r\n  static propTypes = {\r\n     loadCart: PropTypes.func.isRequired,\r\n     updateCart: PropTypes.func.isRequired,\r\n     cartProducts: PropTypes.array.isRequired,\r\n     newProduct: PropTypes.object,\r\n     removeProduct: PropTypes.func,\r\n     productToRemove: PropTypes.object,\r\n     changeProductQuantity: PropTypes.func,\r\n     productToChange: PropTypes.object\r\n   };\r\n\r\n   state = {\r\n     newProduct: this.props.newProduct,\r\n     productToChange: this.props.productToChange,\r\n     productToRemove: this.props.productToRemove\r\n   };\r\n\r\n   static getDerivedStateFromProps(nextProps, prevState) {\r\n\r\n     if (nextProps.newProduct !== prevState.newProduct) {\r\n       return { newProduct : nextProps.newProduct }\r\n     }\r\n\r\n     if(nextProps.productToRemove !== prevState.productToRemove){\r\n       return { productToRemove: nextProps.productToRemove };\r\n     }\r\n\r\n     if (nextProps.productToChange !== prevState.productToChange) {\r\n       return { productToChange: nextProps.productToChange };\r\n     }\r\n     return null;\r\n   }\r\n\r\n   componentDidUpdate(prevProps, prevState){\r\n     if(prevState.newProduct !== this.state.newProduct){\r\n       this.addProduct(this.state.newProduct);\r\n     }\r\n\r\n     if (prevState.productToRemove !== this.state.productToRemove) {\r\n       this.removeProduct(this.state.productToRemove);\r\n     }\r\n\r\n     if (prevState.productToChange !== this.state.productToChange) {\r\n       this.changeProductQuantity(this.state.productToChange);\r\n     }\r\n   }\r\n\r\n  addProduct = product => {\r\n    const { cartProducts, updateCart } = this.props;\r\n    let productAlreadyInCart = false;\r\n\r\n    cartProducts.forEach(cp => {\r\n      if (cp.id === product.id) {\r\n        cp.quantity += product.quantity;\r\n        productAlreadyInCart = true;\r\n      }\r\n    });\r\n\r\n    if (!productAlreadyInCart) {\r\n      cartProducts.push(product);\r\n    }\r\n\r\n    updateCart(cartProducts);\r\n    this.openFloatCart();\r\n  };\r\n\r\n  removeProduct = product => {\r\n    const { cartProducts, updateCart } = this.props;\r\n\r\n    const index = cartProducts.findIndex(p => p.id === product.id);\r\n    if (index >= 0) {\r\n      cartProducts.splice(index, 1);\r\n      updateCart(cartProducts);\r\n    }\r\n  };\r\n\r\n  proceedToCheckout = () => {\r\n    const {\r\n      totalPrice,\r\n      productQuantity,\r\n      currencyFormat,\r\n      currencyId\r\n    } = this.props.cartTotal;\r\n\r\n    if (!productQuantity) {\r\n      alert('Add some product in the cart!');\r\n    } else {\r\n      alert(\r\n        `Checkout - Subtotal: ${currencyFormat} ${formatPrice(\r\n          totalPrice,\r\n          currencyId\r\n        )}`\r\n      );\r\n    }\r\n  };\r\n\r\n  changeProductQuantity = changedProduct => {\r\n    const { cartProducts, updateCart } = this.props;\r\n\r\n    const product = cartProducts.find(p => p.id === changedProduct.id);\r\n    product.quantity = changedProduct.quantity;\r\n    if (product.quantity <= 0) {\r\n      this.removeProduct(product);\r\n    }\r\n    updateCart(cartProducts);\r\n  }\r\n\r\n  render() {\r\n    const { cartTotal, cartProducts, removeProduct, changeProductQuantity } = this.props;\r\n\r\n    const products = cartProducts.map(p => {\r\n      return (\r\n        <Product product={p} removeProduct={removeProduct} changeProductQuantity={changeProductQuantity} key={p.id} />\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div>\r\n      This is the list of products\r\n      {products}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  cartProducts: state.cart.products,\r\n  newProduct: state.cart.productToAdd,\r\n  productToRemove: state.cart.productToRemove,\r\n  productToChange: state.cart.productToChange,\r\n  cartTotal: state.total.data\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { loadCart, updateCart, removeProduct, changeProductQuantity }\r\n)(ProductList);\r\n"]},"metadata":{},"sourceType":"module"}