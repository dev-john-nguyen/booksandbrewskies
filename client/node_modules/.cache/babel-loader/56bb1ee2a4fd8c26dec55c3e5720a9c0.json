{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John\\\\Desktop\\\\Modern React With Redux Projects\\\\beersandbrewskies\\\\beersandbrewskies\\\\src\\\\components\\\\shop\\\\components\\\\checkout\\\\components\\\\Products\\\\ProductList.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { loadCart, removeProduct, changeProductQuantity } from '../../../../services/cart/actions';\nimport { updateCart } from '../../../../services/total/actions';\nimport { formatPrice } from '../util';\n\nclass ProductList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      newProduct: this.props.newProduct,\n      productToChange: this.props.productToChange,\n      productToRemove: this.props.productToRemove,\n      isOpen: false\n    };\n\n    this.addProduct = product => {\n      const _this$props = this.props,\n            cartProducts = _this$props.cartProducts,\n            updateCart = _this$props.updateCart;\n      let productAlreadyInCart = false;\n      cartProducts.forEach(cp => {\n        if (cp.id === product.id) {\n          cp.quantity += product.quantity;\n          productAlreadyInCart = true;\n        }\n      });\n\n      if (!productAlreadyInCart) {\n        cartProducts.push(product);\n      }\n\n      updateCart(cartProducts);\n      this.openFloatCart();\n    };\n\n    this.removeProduct = product => {\n      const _this$props2 = this.props,\n            cartProducts = _this$props2.cartProducts,\n            updateCart = _this$props2.updateCart;\n      const index = cartProducts.findIndex(p => p.id === product.id);\n\n      if (index >= 0) {\n        cartProducts.splice(index, 1);\n        updateCart(cartProducts);\n      }\n    };\n\n    this.proceedToCheckout = () => {\n      const _this$props$cartTotal = this.props.cartTotal,\n            totalPrice = _this$props$cartTotal.totalPrice,\n            productQuantity = _this$props$cartTotal.productQuantity,\n            currencyFormat = _this$props$cartTotal.currencyFormat,\n            currencyId = _this$props$cartTotal.currencyId;\n\n      if (!productQuantity) {\n        alert('Add some product in the cart!');\n      } else {\n        alert(`Checkout - Subtotal: ${currencyFormat} ${formatPrice(totalPrice, currencyId)}`);\n      }\n    };\n\n    this.changeProductQuantity = changedProduct => {\n      const _this$props3 = this.props,\n            cartProducts = _this$props3.cartProducts,\n            updateCart = _this$props3.updateCart;\n      const product = cartProducts.find(p => p.id === changedProduct.id);\n      product.quantity = changedProduct.quantity;\n\n      if (product.quantity <= 0) {\n        this.removeProduct(product);\n      }\n\n      updateCart(cartProducts);\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.newProduct !== prevState.newProduct) {\n      return {\n        newProduct: nextProps.newProduct\n      };\n    }\n\n    if (nextProps.productToRemove !== prevState.productToRemove) {\n      return {\n        productToRemove: nextProps.productToRemove\n      };\n    }\n\n    if (nextProps.productToChange !== prevState.productToChange) {\n      return {\n        productToChange: nextProps.productToChange\n      };\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.newProduct !== this.state.newProduct) {\n      this.addProduct(this.state.newProduct);\n    }\n\n    if (prevState.productToRemove !== this.state.productToRemove) {\n      this.removeProduct(this.state.productToRemove);\n    }\n\n    if (prevState.productToChange !== this.state.productToChange) {\n      this.changeProductQuantity(this.state.productToChange);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"ProductList\");\n  }\n\n}\n\nProductList.propTypes = {\n  loadCart: PropTypes.func.isRequired,\n  updateCart: PropTypes.func.isRequired,\n  cartProducts: PropTypes.array.isRequired,\n  newProduct: PropTypes.object,\n  removeProduct: PropTypes.func,\n  productToRemove: PropTypes.object,\n  changeProductQuantity: PropTypes.func,\n  productToChange: PropTypes.object\n};\n\nconst mapStateToProps = state => ({\n  cartProducts: state.cart.products,\n  newProduct: state.cart.productToAdd,\n  productToRemove: state.cart.productToRemove,\n  productToChange: state.cart.productToChange,\n  cartTotal: state.total.data\n});\n\nexport default connect(mapStateToProps, {\n  loadCart,\n  updateCart,\n  removeProduct,\n  changeProductQuantity\n})(ProductList);","map":{"version":3,"sources":["C:/Users/John/Desktop/Modern React With Redux Projects/beersandbrewskies/beersandbrewskies/src/components/shop/components/checkout/components/Products/ProductList.js"],"names":["React","connect","loadCart","removeProduct","changeProductQuantity","updateCart","formatPrice","ProductList","Component","state","newProduct","props","productToChange","productToRemove","isOpen","addProduct","product","cartProducts","productAlreadyInCart","forEach","cp","id","quantity","push","openFloatCart","index","findIndex","p","splice","proceedToCheckout","cartTotal","totalPrice","productQuantity","currencyFormat","currencyId","alert","changedProduct","find","getDerivedStateFromProps","nextProps","prevState","componentDidUpdate","prevProps","render","propTypes","PropTypes","func","isRequired","array","object","mapStateToProps","cart","products","productToAdd","total","data"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,EAAmBC,aAAnB,EAAkCC,qBAAlC,QAA+D,mCAA/D;AACA,SAASC,UAAT,QAA2B,oCAA3B;AACA,SAASC,WAAT,QAA4B,SAA5B;;AAEA,MAAMC,WAAN,SAA0BP,KAAK,CAACQ,SAAhC,CAA0C;AAAA;AAAA;AAAA,SAYxCC,KAZwC,GAYhC;AACNC,MAAAA,UAAU,EAAE,KAAKC,KAAL,CAAWD,UADjB;AAENE,MAAAA,eAAe,EAAE,KAAKD,KAAL,CAAWC,eAFtB;AAGNC,MAAAA,eAAe,EAAE,KAAKF,KAAL,CAAWE,eAHtB;AAINC,MAAAA,MAAM,EAAE;AAJF,KAZgC;;AAAA,SAiDxCC,UAjDwC,GAiD3BC,OAAO,IAAI;AAAA,0BACe,KAAKL,KADpB;AAAA,YACdM,YADc,eACdA,YADc;AAAA,YACAZ,UADA,eACAA,UADA;AAEtB,UAAIa,oBAAoB,GAAG,KAA3B;AAEAD,MAAAA,YAAY,CAACE,OAAb,CAAqBC,EAAE,IAAI;AACzB,YAAIA,EAAE,CAACC,EAAH,KAAUL,OAAO,CAACK,EAAtB,EAA0B;AACxBD,UAAAA,EAAE,CAACE,QAAH,IAAeN,OAAO,CAACM,QAAvB;AACAJ,UAAAA,oBAAoB,GAAG,IAAvB;AACD;AACF,OALD;;AAOA,UAAI,CAACA,oBAAL,EAA2B;AACzBD,QAAAA,YAAY,CAACM,IAAb,CAAkBP,OAAlB;AACD;;AAEDX,MAAAA,UAAU,CAACY,YAAD,CAAV;AACA,WAAKO,aAAL;AACD,KAlEuC;;AAAA,SAoExCrB,aApEwC,GAoExBa,OAAO,IAAI;AAAA,2BACY,KAAKL,KADjB;AAAA,YACjBM,YADiB,gBACjBA,YADiB;AAAA,YACHZ,UADG,gBACHA,UADG;AAGzB,YAAMoB,KAAK,GAAGR,YAAY,CAACS,SAAb,CAAuBC,CAAC,IAAIA,CAAC,CAACN,EAAF,KAASL,OAAO,CAACK,EAA7C,CAAd;;AACA,UAAII,KAAK,IAAI,CAAb,EAAgB;AACdR,QAAAA,YAAY,CAACW,MAAb,CAAoBH,KAApB,EAA2B,CAA3B;AACApB,QAAAA,UAAU,CAACY,YAAD,CAAV;AACD;AACF,KA5EuC;;AAAA,SA8ExCY,iBA9EwC,GA8EpB,MAAM;AAAA,oCAMpB,KAAKlB,KAAL,CAAWmB,SANS;AAAA,YAEtBC,UAFsB,yBAEtBA,UAFsB;AAAA,YAGtBC,eAHsB,yBAGtBA,eAHsB;AAAA,YAItBC,cAJsB,yBAItBA,cAJsB;AAAA,YAKtBC,UALsB,yBAKtBA,UALsB;;AAQxB,UAAI,CAACF,eAAL,EAAsB;AACpBG,QAAAA,KAAK,CAAC,+BAAD,CAAL;AACD,OAFD,MAEO;AACLA,QAAAA,KAAK,CACF,wBAAuBF,cAAe,IAAG3B,WAAW,CACnDyB,UADmD,EAEnDG,UAFmD,CAGnD,EAJC,CAAL;AAMD;AACF,KAhGuC;;AAAA,SAkGxC9B,qBAlGwC,GAkGhBgC,cAAc,IAAI;AAAA,2BACH,KAAKzB,KADF;AAAA,YAChCM,YADgC,gBAChCA,YADgC;AAAA,YAClBZ,UADkB,gBAClBA,UADkB;AAGxC,YAAMW,OAAO,GAAGC,YAAY,CAACoB,IAAb,CAAkBV,CAAC,IAAIA,CAAC,CAACN,EAAF,KAASe,cAAc,CAACf,EAA/C,CAAhB;AACAL,MAAAA,OAAO,CAACM,QAAR,GAAmBc,cAAc,CAACd,QAAlC;;AACA,UAAIN,OAAO,CAACM,QAAR,IAAoB,CAAxB,EAA2B;AACzB,aAAKnB,aAAL,CAAmBa,OAAnB;AACD;;AACDX,MAAAA,UAAU,CAACY,YAAD,CAAV;AACD,KA3GuC;AAAA;;AAmBxC,SAAOqB,wBAAP,CAAgCC,SAAhC,EAA2CC,SAA3C,EAAsD;AAEpD,QAAID,SAAS,CAAC7B,UAAV,KAAyB8B,SAAS,CAAC9B,UAAvC,EAAmD;AACjD,aAAO;AAAEA,QAAAA,UAAU,EAAG6B,SAAS,CAAC7B;AAAzB,OAAP;AACD;;AAED,QAAG6B,SAAS,CAAC1B,eAAV,KAA8B2B,SAAS,CAAC3B,eAA3C,EAA2D;AACzD,aAAO;AAAEA,QAAAA,eAAe,EAAE0B,SAAS,CAAC1B;AAA7B,OAAP;AACD;;AAED,QAAI0B,SAAS,CAAC3B,eAAV,KAA8B4B,SAAS,CAAC5B,eAA5C,EAA6D;AAC3D,aAAO;AAAEA,QAAAA,eAAe,EAAE2B,SAAS,CAAC3B;AAA7B,OAAP;AACD;;AACD,WAAO,IAAP;AACD;;AAED6B,EAAAA,kBAAkB,CAACC,SAAD,EAAYF,SAAZ,EAAsB;AACtC,QAAGA,SAAS,CAAC9B,UAAV,KAAyB,KAAKD,KAAL,CAAWC,UAAvC,EAAkD;AAChD,WAAKK,UAAL,CAAgB,KAAKN,KAAL,CAAWC,UAA3B;AACD;;AAED,QAAI8B,SAAS,CAAC3B,eAAV,KAA8B,KAAKJ,KAAL,CAAWI,eAA7C,EAA8D;AAC5D,WAAKV,aAAL,CAAmB,KAAKM,KAAL,CAAWI,eAA9B;AACD;;AAED,QAAI2B,SAAS,CAAC5B,eAAV,KAA8B,KAAKH,KAAL,CAAWG,eAA7C,EAA8D;AAC5D,WAAKR,qBAAL,CAA2B,KAAKK,KAAL,CAAWG,eAAtC;AACD;AACF;;AA8DD+B,EAAAA,MAAM,GAAG;AACP,WACM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADN;AAGD;;AAjHuC;;AAApCpC,W,CACGqC,S,GAAY;AAChB1C,EAAAA,QAAQ,EAAE2C,SAAS,CAACC,IAAV,CAAeC,UADT;AAEhB1C,EAAAA,UAAU,EAAEwC,SAAS,CAACC,IAAV,CAAeC,UAFX;AAGhB9B,EAAAA,YAAY,EAAE4B,SAAS,CAACG,KAAV,CAAgBD,UAHd;AAIhBrC,EAAAA,UAAU,EAAEmC,SAAS,CAACI,MAJN;AAKhB9C,EAAAA,aAAa,EAAE0C,SAAS,CAACC,IALT;AAMhBjC,EAAAA,eAAe,EAAEgC,SAAS,CAACI,MANX;AAOhB7C,EAAAA,qBAAqB,EAAEyC,SAAS,CAACC,IAPjB;AAQhBlC,EAAAA,eAAe,EAAEiC,SAAS,CAACI;AARX,C;;AAmHrB,MAAMC,eAAe,GAAGzC,KAAK,KAAK;AAChCQ,EAAAA,YAAY,EAAER,KAAK,CAAC0C,IAAN,CAAWC,QADO;AAEhC1C,EAAAA,UAAU,EAAED,KAAK,CAAC0C,IAAN,CAAWE,YAFS;AAGhCxC,EAAAA,eAAe,EAAEJ,KAAK,CAAC0C,IAAN,CAAWtC,eAHI;AAIhCD,EAAAA,eAAe,EAAEH,KAAK,CAAC0C,IAAN,CAAWvC,eAJI;AAKhCkB,EAAAA,SAAS,EAAErB,KAAK,CAAC6C,KAAN,CAAYC;AALS,CAAL,CAA7B;;AASA,eAAetD,OAAO,CACpBiD,eADoB,EAEpB;AAAEhD,EAAAA,QAAF;AAAYG,EAAAA,UAAZ;AAAwBF,EAAAA,aAAxB;AAAuCC,EAAAA;AAAvC,CAFoB,CAAP,CAGbG,WAHa,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { loadCart, removeProduct, changeProductQuantity } from '../../../../services/cart/actions';\r\nimport { updateCart } from '../../../../services/total/actions';\r\nimport { formatPrice } from '../util';\r\n\r\nclass ProductList extends React.Component {\r\n  static propTypes = {\r\n     loadCart: PropTypes.func.isRequired,\r\n     updateCart: PropTypes.func.isRequired,\r\n     cartProducts: PropTypes.array.isRequired,\r\n     newProduct: PropTypes.object,\r\n     removeProduct: PropTypes.func,\r\n     productToRemove: PropTypes.object,\r\n     changeProductQuantity: PropTypes.func,\r\n     productToChange: PropTypes.object\r\n   };\r\n\r\n  state = {\r\n    newProduct: this.props.newProduct,\r\n    productToChange: this.props.productToChange,\r\n    productToRemove: this.props.productToRemove,\r\n    isOpen: false\r\n  };\r\n\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n\r\n    if (nextProps.newProduct !== prevState.newProduct) {\r\n      return { newProduct : nextProps.newProduct }\r\n    }\r\n\r\n    if(nextProps.productToRemove !== prevState.productToRemove){\r\n      return { productToRemove: nextProps.productToRemove };\r\n    }\r\n\r\n    if (nextProps.productToChange !== prevState.productToChange) {\r\n      return { productToChange: nextProps.productToChange };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState){\r\n    if(prevState.newProduct !== this.state.newProduct){\r\n      this.addProduct(this.state.newProduct);\r\n    }\r\n\r\n    if (prevState.productToRemove !== this.state.productToRemove) {\r\n      this.removeProduct(this.state.productToRemove);\r\n    }\r\n\r\n    if (prevState.productToChange !== this.state.productToChange) {\r\n      this.changeProductQuantity(this.state.productToChange);\r\n    }\r\n  }\r\n\r\n  addProduct = product => {\r\n    const { cartProducts, updateCart } = this.props;\r\n    let productAlreadyInCart = false;\r\n\r\n    cartProducts.forEach(cp => {\r\n      if (cp.id === product.id) {\r\n        cp.quantity += product.quantity;\r\n        productAlreadyInCart = true;\r\n      }\r\n    });\r\n\r\n    if (!productAlreadyInCart) {\r\n      cartProducts.push(product);\r\n    }\r\n\r\n    updateCart(cartProducts);\r\n    this.openFloatCart();\r\n  };\r\n\r\n  removeProduct = product => {\r\n    const { cartProducts, updateCart } = this.props;\r\n\r\n    const index = cartProducts.findIndex(p => p.id === product.id);\r\n    if (index >= 0) {\r\n      cartProducts.splice(index, 1);\r\n      updateCart(cartProducts);\r\n    }\r\n  };\r\n\r\n  proceedToCheckout = () => {\r\n    const {\r\n      totalPrice,\r\n      productQuantity,\r\n      currencyFormat,\r\n      currencyId\r\n    } = this.props.cartTotal;\r\n\r\n    if (!productQuantity) {\r\n      alert('Add some product in the cart!');\r\n    } else {\r\n      alert(\r\n        `Checkout - Subtotal: ${currencyFormat} ${formatPrice(\r\n          totalPrice,\r\n          currencyId\r\n        )}`\r\n      );\r\n    }\r\n  };\r\n\r\n  changeProductQuantity = changedProduct => {\r\n    const { cartProducts, updateCart } = this.props;\r\n\r\n    const product = cartProducts.find(p => p.id === changedProduct.id);\r\n    product.quantity = changedProduct.quantity;\r\n    if (product.quantity <= 0) {\r\n      this.removeProduct(product);\r\n    }\r\n    updateCart(cartProducts);\r\n  }\r\n\r\n  render() {\r\n    return(\r\n          <div>ProductList</div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  cartProducts: state.cart.products,\r\n  newProduct: state.cart.productToAdd,\r\n  productToRemove: state.cart.productToRemove,\r\n  productToChange: state.cart.productToChange,\r\n  cartTotal: state.total.data\r\n});\r\n\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { loadCart, updateCart, removeProduct, changeProductQuantity }\r\n)(ProductList);\r\n"]},"metadata":{},"sourceType":"module"}