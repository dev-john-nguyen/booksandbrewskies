{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John\\\\Desktop\\\\Modern React With Redux Projects\\\\beersandbrewskies\\\\beersandbrewskies\\\\src\\\\components\\\\shop\\\\components\\\\checkout\\\\index.js\";\nimport React from 'react';\nimport { ElementsConsumer, CardElement } from '@stripe/react-stripe-js';\nimport { connect } from 'react-redux';\nimport CardSection from './components/CardSection';\nimport IdentitySection from './components/IdentitySection';\nimport AddressSection from './components/AddressSection';\nimport './css/CheckoutFormStyles.css';\nimport Spinner from '../../../spinner';\nimport CartSection from './components/CartSection';\nimport { getSessionStorageUpdateCart } from '../util';\nimport { getStripe, storeOrder } from '../../../../services/order/actions';\nimport { clearCart } from '../../../../services/cart/actions';\nimport { clearCartTotal } from '../../../../services/total/actions';\nimport history from '../../../../history';\nimport Modal from '../../../Modal';\n\nclass CheckoutForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      name: '',\n      email: '',\n      phone: '',\n      line1: '',\n      city: '',\n      state: '',\n      zip: '',\n      client_secret: '',\n      client_error: true,\n      order_completed: false,\n      order_failed: false,\n      orderId: '',\n      buttonLoading: false\n    };\n\n    this.componentDidMount = async () => {\n      const _this$props = this.props,\n            cartTotal = _this$props.cartTotal,\n            cartProducts = _this$props.cartProducts;\n      getSessionStorageUpdateCart(cartProducts, cartTotal);\n\n      if (cartProducts.length > 0) {\n        const response = await getStripe(cartTotal, cartProducts);\n\n        if (response.error) {\n          this.setState({\n            client_error: response.error\n          });\n        } else if (response.data) {\n          this.setState({\n            client_secret: response.data\n          });\n        }\n      }\n    };\n\n    this.handleSubmit = async event => {\n      // We don't want to let default form submission happen here,\n      // which would refresh the page.\n      event.preventDefault();\n      const _this$props2 = this.props,\n            stripe = _this$props2.stripe,\n            elements = _this$props2.elements,\n            cartProducts = _this$props2.cartProducts,\n            cartTotal = _this$props2.cartTotal;\n      const _this$state = this.state,\n            name = _this$state.name,\n            phone = _this$state.phone,\n            email = _this$state.email,\n            line1 = _this$state.line1,\n            city = _this$state.city,\n            state = _this$state.state,\n            zip = _this$state.zip,\n            client_secret = _this$state.client_secret;\n\n      if (!stripe || !elements) {\n        // Stripe.js has not yet loaded.\n        // Make  sure to disable form submission until Stripe.js has loaded.\n        return;\n      }\n\n      const result = await stripe.confirmCardPayment(client_secret, {\n        payment_method: {\n          card: elements.getElement(CardElement),\n          billing_details: {\n            name: name,\n            phone: phone,\n            email: email\n          }\n        },\n        shipping: {\n          name: name,\n          phone: phone,\n          address: {\n            line1: line1,\n            city: city,\n            state: state,\n            postal_code: zip\n          }\n        }\n      });\n\n      if (result.error) {\n        this.setState({\n          order_failed: true\n        });\n      } else {\n        if (result.paymentIntent.status === 'succeeded') {\n          const response = await storeOrder(result.paymentIntent, cartProducts, cartTotal, name, phone, email);\n\n          if (response.error) {\n            this.setState({\n              client_error: true\n            });\n          } else if (response.data) {\n            sessionStorage.removeItem('cartTotal');\n            sessionStorage.removeItem('cartProducts');\n            this.props.clearCart();\n            this.props.clearCartTotal();\n            this.setState({\n              order_completed: true,\n              orderId: response.data.chargeId\n            });\n          } else {\n            this.setState({\n              client_error: true\n            });\n          }\n        }\n      }\n    };\n\n    this.handleInputChange = event => {\n      const target = event.target;\n      const value = target.value;\n      const name = target.name;\n      this.setState({\n        [name]: value\n      });\n    };\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          name = _this$state2.name,\n          phone = _this$state2.phone,\n          email = _this$state2.email,\n          line1 = _this$state2.line1,\n          city = _this$state2.city,\n          state = _this$state2.state,\n          zip = _this$state2.zip,\n          client_secret = _this$state2.client_secret,\n          client_error = _this$state2.client_error,\n          order_completed = _this$state2.order_completed,\n          orderId = _this$state2.orderId,\n          buttonLoading = _this$state2.buttonLoading,\n          order_failed = _this$state2.order_failed;\n    const _this$props3 = this.props,\n          cartTotal = _this$props3.cartTotal,\n          cartProducts = _this$props3.cartProducts;\n\n    if (client_error) {\n      const clientErrorDescription = `Looks like something went wrong.\n      We will look into it. I apologize for the inconvience.\n      Feel free to contact us with any questions or concerns.`;\n      return React.createElement(Modal, {\n        showValue: true,\n        closeDirect: \"/\",\n        buttonName: \"Close\",\n        title: \"Oops!\",\n        description: clientErrorDescription,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      });\n    }\n\n    if (order_failed) {\n      const descriptionOrderFailed = \"Looks like your card has insufficient funds. No payment was taken.\";\n      return React.createElement(Modal, {\n        showValue: true,\n        closeDirect: \"/shop/checkout\",\n        handleState: () => this.setState({\n          order_failed: false\n        }),\n        buttonName: \"Try Again\",\n        title: \"Payment Failed\",\n        description: descriptionOrderFailed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      });\n    }\n\n    if (order_completed) {\n      const descriptionOrderCompleted = `Your confirmation number is ${orderId}.\n      Check your email for details. If you have any questions or\n      concerns regarding your order please feel free to contact us.`;\n      return React.createElement(Modal, {\n        showValue: true,\n        closeDirect: \"/\",\n        buttonName: \"OK\",\n        title: `Thank You ${name}!`,\n        description: descriptionOrderCompleted,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      });\n    }\n\n    if (cartProducts.length <= 0) {\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, \"Cart is empty\");\n    }\n\n    if (client_secret === '') {\n      if (client_error) {\n        return React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179\n          },\n          __self: this\n        }, \"We have a problem :(\");\n      } else {\n        return React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181\n          },\n          __self: this\n        });\n      }\n    }\n\n    return React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-md-4 order-md-2 mb-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(CartSection, {\n      cartTotal: cartTotal,\n      cartProducts: cartProducts,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"col-md-8 order-md-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(IdentitySection, {\n      name: name,\n      phone: phone,\n      email: email,\n      handleInputChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }), React.createElement(AddressSection, {\n      line1: line1,\n      city: city,\n      state: state,\n      zip: zip,\n      handleInputChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }), React.createElement(CardSection, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      disabled: !this.props.stripe,\n      onClick: () => this.setState({\n        buttonLoading: true\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, buttonLoading && React.createElement(\"span\", {\n      className: \"spinner-border spinner-border-sm\",\n      role: \"status\",\n      \"aria-hidden\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }), \"Confirm\"))));\n  }\n\n}\n\nconst InjectedCheckoutForm = ({\n  cartProducts,\n  cartTotal,\n  clearCart,\n  clearCartTotal\n}) => {\n  return React.createElement(ElementsConsumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, ({\n    stripe,\n    elements\n  }) => React.createElement(CheckoutForm, {\n    stripe: stripe,\n    elements: elements,\n    cartProducts: cartProducts,\n    cartTotal: cartTotal,\n    clearCart: clearCart,\n    clearCartTotal: clearCartTotal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = state => ({\n  cartTotal: state.total.data,\n  cartProducts: state.cart.products\n});\n\nexport default connect(mapStateToProps, {\n  clearCart,\n  clearCartTotal\n})(InjectedCheckoutForm);","map":{"version":3,"sources":["C:/Users/John/Desktop/Modern React With Redux Projects/beersandbrewskies/beersandbrewskies/src/components/shop/components/checkout/index.js"],"names":["React","ElementsConsumer","CardElement","connect","CardSection","IdentitySection","AddressSection","Spinner","CartSection","getSessionStorageUpdateCart","getStripe","storeOrder","clearCart","clearCartTotal","history","Modal","CheckoutForm","Component","state","name","email","phone","line1","city","zip","client_secret","client_error","order_completed","order_failed","orderId","buttonLoading","componentDidMount","props","cartTotal","cartProducts","length","response","error","setState","data","handleSubmit","event","preventDefault","stripe","elements","result","confirmCardPayment","payment_method","card","getElement","billing_details","shipping","address","postal_code","paymentIntent","status","sessionStorage","removeItem","chargeId","handleInputChange","target","value","render","clientErrorDescription","descriptionOrderFailed","descriptionOrderCompleted","InjectedCheckoutForm","mapStateToProps","total","cart","products"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {ElementsConsumer, CardElement} from '@stripe/react-stripe-js';\r\nimport { connect } from 'react-redux';\r\nimport CardSection from './components/CardSection';\r\nimport IdentitySection from './components/IdentitySection';\r\nimport AddressSection from './components/AddressSection';\r\nimport './css/CheckoutFormStyles.css';\r\nimport Spinner from '../../../spinner'\r\nimport CartSection from './components/CartSection';\r\nimport { getSessionStorageUpdateCart } from '../util';\r\nimport { getStripe, storeOrder } from '../../../../services/order/actions';\r\nimport { clearCart } from '../../../../services/cart/actions';\r\nimport { clearCartTotal } from '../../../../services/total/actions';\r\nimport history from '../../../../history';\r\nimport Modal from '../../../Modal';\r\n\r\nclass CheckoutForm extends React.Component {\r\n\r\n  state = {\r\n    name: '',\r\n    email: '',\r\n    phone: '',\r\n    line1: '',\r\n    city: '',\r\n    state: '',\r\n    zip: '',\r\n    client_secret: '',\r\n    client_error: true,\r\n    order_completed: false,\r\n    order_failed: false,\r\n    orderId: '',\r\n    buttonLoading: false\r\n  }\r\n\r\n  componentDidMount = async() => {\r\n    const {cartTotal, cartProducts} = this.props;\r\n    getSessionStorageUpdateCart(cartProducts, cartTotal);\r\n    if(cartProducts.length > 0 ){\r\n      const response = await getStripe(cartTotal, cartProducts);\r\n\r\n      if(response.error){\r\n        this.setState({client_error: response.error});\r\n      }else if (response.data){\r\n        this.setState({client_secret: response.data});\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  handleSubmit = async (event) => {\r\n    // We don't want to let default form submission happen here,\r\n    // which would refresh the page.\r\n    event.preventDefault();\r\n\r\n    const {stripe, elements, cartProducts, cartTotal} = this.props\r\n    const {name, phone, email, line1, city, state, zip, client_secret} = this.state;\r\n\r\n    if (!stripe || !elements) {\r\n      // Stripe.js has not yet loaded.\r\n      // Make  sure to disable form submission until Stripe.js has loaded.\r\n      return;\r\n    }\r\n\r\n    const result = await stripe.confirmCardPayment(client_secret, {\r\n      payment_method: {\r\n        card: elements.getElement(CardElement),\r\n        billing_details: {\r\n          name: name,\r\n          phone: phone,\r\n          email: email\r\n        },\r\n      },\r\n      shipping: {\r\n        name: name,\r\n        phone: phone,\r\n        address: {\r\n          line1: line1,\r\n          city: city,\r\n          state: state,\r\n          postal_code: zip\r\n        }\r\n      }\r\n    });\r\n\r\n    if (result.error) {\r\n      this.setState({ order_failed: true });\r\n    } else {\r\n      if (result.paymentIntent.status === 'succeeded') {\r\n\r\n        const response = await storeOrder(\r\n          result.paymentIntent,\r\n          cartProducts,\r\n          cartTotal,\r\n          name,\r\n          phone,\r\n          email);\r\n\r\n          if(response.error){\r\n            this.setState({client_error: true});\r\n          }else if(response.data){\r\n            sessionStorage.removeItem('cartTotal');\r\n            sessionStorage.removeItem('cartProducts');\r\n            this.props.clearCart();\r\n            this.props.clearCartTotal();\r\n            this.setState({ order_completed: true, orderId: response.data.chargeId });\r\n          }else{\r\n            this.setState({client_error: true});\r\n          }\r\n\r\n      }\r\n    }\r\n  };\r\n\r\n  handleInputChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { name, phone, email, line1, city, state, zip, client_secret, client_error, order_completed, orderId, buttonLoading, order_failed } = this.state;\r\n    const { cartTotal, cartProducts } = this.props;\r\n\r\n    if(client_error) {\r\n      const clientErrorDescription = `Looks like something went wrong.\r\n      We will look into it. I apologize for the inconvience.\r\n      Feel free to contact us with any questions or concerns.`;\r\n      return (\r\n        <Modal\r\n        showValue={true}\r\n        closeDirect = '/'\r\n        buttonName = 'Close'\r\n        title='Oops!'\r\n        description= {clientErrorDescription}\r\n        />\r\n      )\r\n    }\r\n\r\n    if(order_failed){\r\n      const descriptionOrderFailed = \"Looks like your card has insufficient funds. No payment was taken.\";\r\n      return (\r\n        <Modal\r\n        showValue={true}\r\n        closeDirect = '/shop/checkout'\r\n        handleState = {() => this.setState({order_failed: false})}\r\n        buttonName = 'Try Again'\r\n        title='Payment Failed'\r\n        description= {descriptionOrderFailed}\r\n        />\r\n      )\r\n    }\r\n\r\n    if(order_completed){\r\n      const descriptionOrderCompleted = `Your confirmation number is ${orderId}.\r\n      Check your email for details. If you have any questions or\r\n      concerns regarding your order please feel free to contact us.`;\r\n\r\n      return(\r\n        <Modal\r\n        showValue={true}\r\n        closeDirect = '/'\r\n        buttonName = 'OK'\r\n        title={`Thank You ${name}!`}\r\n        description= {descriptionOrderCompleted}\r\n        />\r\n      )\r\n    }\r\n\r\n    if(cartProducts.length <= 0) {\r\n      return <h1>Cart is empty</h1>;\r\n    }\r\n\r\n    if(client_secret === ''){\r\n      if(client_error){\r\n        return <h1>We have a problem :(</h1>;\r\n      }else{\r\n        return <Spinner />;\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className=\"row\">\r\n      <div className=\"col-md-4 order-md-2 mb-4\">\r\n        <CartSection cartTotal={cartTotal} cartProducts={cartProducts} />\r\n      </div>\r\n      <div className=\"col-md-8 order-md-1\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <IdentitySection name={name} phone={phone} email={email} handleInputChange={this.handleInputChange}/>\r\n          <AddressSection line1={line1} city={city} state={state} zip={zip} handleInputChange={this.handleInputChange} />\r\n          <CardSection />\r\n            <button className=\"btn btn-primary\" disabled={!this.props.stripe} onClick={() => this.setState({buttonLoading: true})}>\r\n              {buttonLoading && <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> }\r\n              Confirm\r\n            </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst InjectedCheckoutForm = ({cartProducts, cartTotal, clearCart, clearCartTotal}) => {\r\n  return (\r\n    <ElementsConsumer>\r\n      {({stripe, elements}) => (\r\n        <CheckoutForm  stripe={stripe}\r\n          elements={elements}\r\n          cartProducts={cartProducts}\r\n          cartTotal={cartTotal}\r\n          clearCart={clearCart}\r\n          clearCartTotal={clearCartTotal}\r\n          />\r\n      )}\r\n    </ElementsConsumer>\r\n  );\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  cartTotal: state.total.data,\r\n  cartProducts: state.cart.products\r\n});\r\n\r\nexport default connect(mapStateToProps, {clearCart, clearCartTotal})(InjectedCheckoutForm);\r\n"]},"metadata":{},"sourceType":"module"}