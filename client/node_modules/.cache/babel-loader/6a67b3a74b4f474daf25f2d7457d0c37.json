{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John\\\\Desktop\\\\Modern React With Redux Projects\\\\beersandbrewskies\\\\beersandbrewskies\\\\src\\\\components\\\\shop\\\\components\\\\checkout\\\\index.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport CartProduct from '../floatcart/components/CartProduct';\n\nclass Checkout extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.updateCart = () => {\n      const cartProductsLs = JSON.parse(localStorage.getItem('cartProducts'));\n      const cartTotalLs = JSON.parse(localStorage.getItem('cartTotal'));\n      const _this$props = this.props,\n            cartProducts = _this$props.cartProducts,\n            cartTotal = _this$props.cartTotal;\n\n      if (cartProductsLs && cartTotalLs) {\n        if (cartProductsLs.length > 0) {\n          Object.assign(cartProducts, cartProductsLs);\n          Object.assign(cartTotal, cartTotalLs);\n        }\n      }\n    };\n\n    this.removeProduct = product => {\n      const _this$props2 = this.props,\n            cartProducts = _this$props2.cartProducts,\n            updateCart = _this$props2.updateCart;\n      const index = cartProducts.findIndex(p => p.id === product.id);\n\n      if (index >= 0) {\n        cartProducts.splice(index, 1);\n        updateCart(cartProducts);\n      }\n    };\n\n    this.changeProductQuantity = changedProduct => {\n      const _this$props3 = this.props,\n            cartProducts = _this$props3.cartProducts,\n            updateCart = _this$props3.updateCart;\n      const product = cartProducts.find(p => p.id === changedProduct.id);\n      product.quantity = changedProduct.quantity;\n\n      if (product.quantity <= 0) {\n        this.removeProduct(product);\n      }\n\n      updateCart(cartProducts);\n    };\n  }\n\n  componentDidMount() {\n    this.updateCart();\n  }\n\n  render() {\n    const cartProducts = this.props.cartProducts;\n    const removeProduct = this.removeProduct,\n          changeProductQuantity = this.changeProductQuantity;\n    const products = cartProducts.map(p => {\n      return React.createElement(CartProduct, {\n        product: p,\n        removeProduct: removeProduct,\n        changeProductQuantity: changeProductQuantity,\n        key: p.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      });\n    });\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, this.props.cartProducts);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    cartProducts: state.cart.products,\n    cartTotal: state.total.data\n  };\n};\n\nexport default connect(mapStateToProps, {})(Checkout);","map":{"version":3,"sources":["C:/Users/John/Desktop/Modern React With Redux Projects/beersandbrewskies/beersandbrewskies/src/components/shop/components/checkout/index.js"],"names":["React","PropTypes","connect","CartProduct","Checkout","Component","updateCart","cartProductsLs","JSON","parse","localStorage","getItem","cartTotalLs","props","cartProducts","cartTotal","length","Object","assign","removeProduct","product","index","findIndex","p","id","splice","changeProductQuantity","changedProduct","find","quantity","componentDidMount","render","products","map","mapStateToProps","state","cart","total","data"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,WAAP,MAAwB,qCAAxB;;AAEA,MAAMC,QAAN,SAAuBJ,KAAK,CAACK,SAA7B,CAAuC;AAAA;AAAA;;AAAA,SAKrCC,UALqC,GAKxB,MAAM;AACjB,YAAMC,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAX,CAAvB;AACA,YAAMC,WAAW,GAAGJ,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAApB;AAFiB,0BAGmB,KAAKE,KAHxB;AAAA,YAGTC,YAHS,eAGTA,YAHS;AAAA,YAGKC,SAHL,eAGKA,SAHL;;AAIf,UAAGR,cAAc,IAAIK,WAArB,EAAiC;AAC/B,YAAGL,cAAc,CAACS,MAAf,GAAwB,CAA3B,EAA6B;AAC3BC,UAAAA,MAAM,CAACC,MAAP,CAAcJ,YAAd,EAA4BP,cAA5B;AACAU,UAAAA,MAAM,CAACC,MAAP,CAAcH,SAAd,EAAyBH,WAAzB;AACD;AACF;AACF,KAfkC;;AAAA,SAkBrCO,aAlBqC,GAkBrBC,OAAO,IAAI;AAAA,2BACY,KAAKP,KADjB;AAAA,YACjBC,YADiB,gBACjBA,YADiB;AAAA,YACHR,UADG,gBACHA,UADG;AAGzB,YAAMe,KAAK,GAAGP,YAAY,CAACQ,SAAb,CAAuBC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASJ,OAAO,CAACI,EAA7C,CAAd;;AACA,UAAIH,KAAK,IAAI,CAAb,EAAgB;AACdP,QAAAA,YAAY,CAACW,MAAb,CAAoBJ,KAApB,EAA2B,CAA3B;AACAf,QAAAA,UAAU,CAACQ,YAAD,CAAV;AACD;AACF,KA1BoC;;AAAA,SA4BrCY,qBA5BqC,GA4BbC,cAAc,IAAI;AAAA,2BACH,KAAKd,KADF;AAAA,YAChCC,YADgC,gBAChCA,YADgC;AAAA,YAClBR,UADkB,gBAClBA,UADkB;AAGxC,YAAMc,OAAO,GAAGN,YAAY,CAACc,IAAb,CAAkBL,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASG,cAAc,CAACH,EAA/C,CAAhB;AACAJ,MAAAA,OAAO,CAACS,QAAR,GAAmBF,cAAc,CAACE,QAAlC;;AACA,UAAIT,OAAO,CAACS,QAAR,IAAoB,CAAxB,EAA2B;AACzB,aAAKV,aAAL,CAAmBC,OAAnB;AACD;;AACDd,MAAAA,UAAU,CAACQ,YAAD,CAAV;AACD,KArCoC;AAAA;;AACrCgB,EAAAA,iBAAiB,GAAG;AAClB,SAAKxB,UAAL;AACD;;AAoCCyB,EAAAA,MAAM,GAAE;AAAA,UACEjB,YADF,GACmB,KAAKD,KADxB,CACEC,YADF;AAAA,UAEEK,aAFF,GAE2C,IAF3C,CAEEA,aAFF;AAAA,UAEiBO,qBAFjB,GAE2C,IAF3C,CAEiBA,qBAFjB;AAGN,UAAMM,QAAQ,GAAGlB,YAAY,CAACmB,GAAb,CAAiBV,CAAC,IAAI;AACrC,aACE,oBAAC,WAAD;AAAa,QAAA,OAAO,EAAEA,CAAtB;AAAyB,QAAA,aAAa,EAAEJ,aAAxC;AAAuD,QAAA,qBAAqB,EAAEO,qBAA9E;AAAqG,QAAA,GAAG,EAAEH,CAAC,CAACC,EAA5G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD,KAJgB,CAAjB;AAOA,WACA,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKX,KAAL,CAAWC,YADd,CADA;AAKH;;AAtDoC;;AAyDvC,MAAMoB,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACPrB,IAAAA,YAAY,EAAEqB,KAAK,CAACC,IAAN,CAAWJ,QADlB;AAEPjB,IAAAA,SAAS,EAAEoB,KAAK,CAACE,KAAN,CAAYC;AAFhB,GAAP;AAID,CALD;;AAOA,eAAepC,OAAO,CAACgC,eAAD,EAAiB,EAAjB,CAAP,CAA4B9B,QAA5B,CAAf","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport CartProduct from '../floatcart/components/CartProduct';\r\n\r\nclass Checkout extends React.Component {\r\n  componentDidMount() {\r\n    this.updateCart();\r\n  }\r\n\r\n  updateCart = () => {\r\n    const cartProductsLs = JSON.parse(localStorage.getItem('cartProducts'));\r\n    const cartTotalLs = JSON.parse(localStorage.getItem('cartTotal'));\r\n    const { cartProducts, cartTotal } = this.props;\r\n      if(cartProductsLs && cartTotalLs){\r\n        if(cartProductsLs.length > 0){\r\n          Object.assign(cartProducts, cartProductsLs);\r\n          Object.assign(cartTotal, cartTotalLs);\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n  removeProduct = product => {\r\n    const { cartProducts, updateCart } = this.props;\r\n\r\n    const index = cartProducts.findIndex(p => p.id === product.id);\r\n    if (index >= 0) {\r\n      cartProducts.splice(index, 1);\r\n      updateCart(cartProducts);\r\n    }\r\n  };\r\n\r\n  changeProductQuantity = changedProduct => {\r\n    const { cartProducts, updateCart } = this.props;\r\n\r\n    const product = cartProducts.find(p => p.id === changedProduct.id);\r\n    product.quantity = changedProduct.quantity;\r\n    if (product.quantity <= 0) {\r\n      this.removeProduct(product);\r\n    }\r\n    updateCart(cartProducts);\r\n  }\r\n\r\n    render(){\r\n      const { cartProducts } = this.props;\r\n      const { removeProduct, changeProductQuantity } = this\r\n      const products = cartProducts.map(p => {\r\n        return (\r\n          <CartProduct product={p} removeProduct={removeProduct} changeProductQuantity={changeProductQuantity} key={p.id} />\r\n        );\r\n      });\r\n\r\n\r\n      return (\r\n      <React.Fragment>\r\n        {this.props.cartProducts}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n  cartProducts: state.cart.products,\r\n  cartTotal: state.total.data\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,{})(Checkout);\r\n"]},"metadata":{},"sourceType":"module"}