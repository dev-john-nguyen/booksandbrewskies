{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John\\\\Desktop\\\\Modern React With Redux Projects\\\\beersandbrewskies\\\\beersandbrewskies\\\\src\\\\components\\\\shop\\\\components\\\\checkout\\\\index.js\";\nimport React from 'react';\nimport { ElementsConsumer, CardElement } from '@stripe/react-stripe-js';\nimport { connect } from 'react-redux';\nimport CardSection from './components/CardSection';\nimport IdentitySection from './components/IdentitySection';\nimport AddressSection from './components/AddressSection';\nimport './css/CheckoutFormStyles.css';\nimport axios from 'axios';\nimport Spinner from '../../../spinner';\nimport CartSection from './components/CartSection';\nimport { getLocalStorageUpdateCart } from '../util';\n\nclass CheckoutForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      name: '',\n      email: '',\n      phone: '',\n      line1: '',\n      city: '',\n      state: '',\n      zip: '',\n      client_secret: '',\n      client_error: false\n    };\n\n    this.componentDidMount = async () => {\n      const _this$props = this.props,\n            cartTotal = _this$props.cartTotal,\n            cartProducts = _this$props.cartProducts;\n      getLocalStorageUpdateCart(cartProducts, cartTotal);\n\n      if (cartProducts.length > 0) {\n        let response;\n\n        try {\n          response = await axios.get('/shop/checkout');\n        } catch (e) {\n          this.setState({\n            client_error: true\n          });\n          return console.log(e);\n        }\n\n        if (response.data) {\n          this.setState({\n            client_secret: response.data\n          });\n        }\n      }\n    };\n\n    this.handleSubmit = async event => {\n      // We don't want to let default form submission happen here,\n      // which would refresh the page.\n      event.preventDefault();\n      console.log(\"Called\");\n      const _this$props2 = this.props,\n            stripe = _this$props2.stripe,\n            elements = _this$props2.elements;\n      const _this$state = this.state,\n            name = _this$state.name,\n            phone = _this$state.phone,\n            email = _this$state.email,\n            line1 = _this$state.line1,\n            city = _this$state.city,\n            state = _this$state.state,\n            zip = _this$state.zip;\n\n      if (!stripe || !elements) {\n        // Stripe.js has not yet loaded.\n        // Make  sure to disable form submission until Stripe.js has loaded.\n        return;\n      }\n\n      const result = await stripe.confirmCardPayment(this.state.client_secret, {\n        payment_method: {\n          card: elements.getElement(CardElement),\n          billing_details: {\n            name: name,\n            phone: phone,\n            email: email,\n            line1: line1,\n            city: city,\n            state: state,\n            zip: zip,\n            products: this.props.cartProducts\n          }\n        }\n      });\n\n      if (result.error) {\n        // Show error to your customer (e.g., insufficient funds)\n        console.log(result.error.message);\n      } else {\n        // The payment has been processed!\n        if (result.paymentIntent.status === 'succeeded') {\n          // Show a success message to your customer\n          // There's a risk of the customer closing the window before callback\n          // execution. Set up a webhook or plugin to listen for the\n          // payment_intent.succeeded event that handles any business critical\n          // post-payment actions.\n          const storeOrder = await axios.post('/shop/checkout/success');\n          storeOrder.then().catch(); //Display message\n          //Payment Succeeded and StoredOrder in the database\n        }\n      }\n    };\n\n    this.handleInputChange = event => {\n      const target = event.target;\n      const value = target.value;\n      const name = target.name;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleClientScrentRender = () => {\n      const _this$state2 = this.state,\n            client_secret = _this$state2.client_secret,\n            client_error = _this$state2.client_error;\n\n      if (client_secret === '') {\n        if (client_error) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 115\n            },\n            __self: this\n          }, \"We have a problem :(\");\n        } else {\n          return React.createElement(Spinner, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 118\n            },\n            __self: this\n          });\n        }\n      }\n    };\n  }\n\n  render() {\n    const _this$state3 = this.state,\n          name = _this$state3.name,\n          phone = _this$state3.phone,\n          email = _this$state3.email,\n          line1 = _this$state3.line1,\n          city = _this$state3.city,\n          state = _this$state3.state,\n          zip = _this$state3.zip;\n    const _this$props3 = this.props,\n          cartTotal = _this$props3.cartTotal,\n          cartProducts = _this$props3.cartProducts;\n\n    if (cartProducts.length <= 0) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \"Cart is empty\"));\n    }\n\n    const _this$state4 = this.state,\n          client_secret = _this$state4.client_secret,\n          client_error = _this$state4.client_error;\n\n    if (client_secret === '') {\n      if (client_error) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }, \"We have a problem :(\");\n      } else {\n        return React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        });\n      }\n    }\n\n    return React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-md-4 order-md-2 mb-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(CartSection, {\n      cartTotal: cartTotal,\n      cartProducts: cartProducts,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"col-md-8 order-md-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(IdentitySection, {\n      name: name,\n      phone: phone,\n      email: email,\n      handleInputChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), React.createElement(AddressSection, {\n      line1: line1,\n      city: city,\n      state: state,\n      zip: zip,\n      handleInputChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), React.createElement(CardSection, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      disabled: !this.props.stripe,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Confirm order\"))));\n  }\n\n}\n\nconst InjectedCheckoutForm = ({\n  cartProducts,\n  cartTotal\n}) => {\n  return React.createElement(ElementsConsumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, ({\n    stripe,\n    elements\n  }) => React.createElement(CheckoutForm, {\n    stripe: stripe,\n    elements: elements,\n    cartProducts: cartProducts,\n    cartTotal: cartTotal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = state => ({\n  cartTotal: state.total.data,\n  cartProducts: state.cart.products\n});\n\nexport default connect(mapStateToProps, {})(InjectedCheckoutForm);","map":{"version":3,"sources":["C:/Users/John/Desktop/Modern React With Redux Projects/beersandbrewskies/beersandbrewskies/src/components/shop/components/checkout/index.js"],"names":["React","ElementsConsumer","CardElement","connect","CardSection","IdentitySection","AddressSection","axios","Spinner","CartSection","getLocalStorageUpdateCart","CheckoutForm","Component","state","name","email","phone","line1","city","zip","client_secret","client_error","componentDidMount","props","cartTotal","cartProducts","length","response","get","e","setState","console","log","data","handleSubmit","event","preventDefault","stripe","elements","result","confirmCardPayment","payment_method","card","getElement","billing_details","products","error","message","paymentIntent","status","storeOrder","post","then","catch","handleInputChange","target","value","handleClientScrentRender","render","InjectedCheckoutForm","mapStateToProps","total","cart"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {ElementsConsumer, CardElement} from '@stripe/react-stripe-js';\r\nimport { connect } from 'react-redux';\r\nimport CardSection from './components/CardSection';\r\nimport IdentitySection from './components/IdentitySection';\r\nimport AddressSection from './components/AddressSection';\r\nimport './css/CheckoutFormStyles.css';\r\nimport axios from 'axios';\r\nimport Spinner from '../../../spinner'\r\nimport CartSection from './components/CartSection';\r\nimport { getLocalStorageUpdateCart } from '../util';\r\n\r\nclass CheckoutForm extends React.Component {\r\n\r\n  state = {\r\n    name: '',\r\n    email: '',\r\n    phone: '',\r\n    line1: '',\r\n    city: '',\r\n    state: '',\r\n    zip: '',\r\n    client_secret: '',\r\n    client_error: false,\r\n  }\r\n\r\n  componentDidMount = async() => {\r\n    const {cartTotal, cartProducts} = this.props;\r\n    getLocalStorageUpdateCart(cartProducts, cartTotal);\r\n    if(cartProducts.length > 0 ){\r\n      let response;\r\n      try {\r\n       response = await axios.get('/shop/checkout');\r\n      } catch (e) {\r\n        this.setState({ client_error: true });\r\n      return console.log(e);\r\n      }\r\n\r\n      if(response.data){\r\n        this.setState({client_secret: response.data})\r\n      }\r\n    }\r\n  }\r\n\r\n  handleSubmit = async (event) => {\r\n    // We don't want to let default form submission happen here,\r\n    // which would refresh the page.\r\n    event.preventDefault();\r\n\r\n    console.log(\"Called\");\r\n\r\n    const {stripe, elements} = this.props\r\n    const {name, phone, email, line1, city, state, zip} = this.state;\r\n\r\n    if (!stripe || !elements) {\r\n      // Stripe.js has not yet loaded.\r\n      // Make  sure to disable form submission until Stripe.js has loaded.\r\n      return;\r\n    }\r\n\r\n    const result = await stripe.confirmCardPayment(this.state.client_secret, {\r\n      payment_method: {\r\n        card: elements.getElement(CardElement),\r\n        billing_details: {\r\n          name: name,\r\n          phone: phone,\r\n          email: email,\r\n          line1: line1,\r\n          city: city,\r\n          state: state,\r\n          zip: zip,\r\n          products: this.props.cartProducts\r\n        },\r\n      }\r\n    });\r\n\r\n    if (result.error) {\r\n      // Show error to your customer (e.g., insufficient funds)\r\n      console.log(result.error.message);\r\n    } else {\r\n      // The payment has been processed!\r\n      if (result.paymentIntent.status === 'succeeded') {\r\n        // Show a success message to your customer\r\n        // There's a risk of the customer closing the window before callback\r\n        // execution. Set up a webhook or plugin to listen for the\r\n        // payment_intent.succeeded event that handles any business critical\r\n        // post-payment actions.\r\n        const storeOrder = await axios.post('/shop/checkout/success');\r\n        storeOrder\r\n          .then()\r\n          .catch()\r\n\r\n          //Display message\r\n          //Payment Succeeded and StoredOrder in the database\r\n      }\r\n    }\r\n  };\r\n\r\n  handleInputChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  handleClientScrentRender = () => {\r\n    const { client_secret, client_error } = this.state;\r\n\r\n    if(client_secret === ''){\r\n      if(client_error){\r\n        return (\r\n          <div>We have a problem :(</div>\r\n        )\r\n      }else{\r\n        return <Spinner />;\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { name, phone, email, line1, city, state, zip } = this.state;\r\n    const { cartTotal, cartProducts } = this.props;\r\n    if(cartProducts.length <= 0) {\r\n      return (\r\n        <div>\r\n          <h1>Cart is empty</h1>\r\n        </div>\r\n      )\r\n    }\r\n    const { client_secret, client_error } = this.state;\r\n\r\n    if(client_secret === ''){\r\n      if(client_error){\r\n        return (\r\n          <div>We have a problem :(</div>\r\n        )\r\n      }else{\r\n        return <Spinner />;\r\n      }\r\n    }\r\n    return (\r\n      <div className=\"row\">\r\n      <div className=\"col-md-4 order-md-2 mb-4\">\r\n        <CartSection cartTotal={cartTotal} cartProducts={cartProducts} />\r\n      </div>\r\n      <div className=\"col-md-8 order-md-1\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <IdentitySection name={name} phone={phone} email={email} handleInputChange={this.handleInputChange}/>\r\n          <AddressSection line1={line1} city={city} state={state} zip={zip} handleInputChange={this.handleInputChange} />\r\n          <CardSection />\r\n          <button className=\"btn btn-primary\" disabled={!this.props.stripe}>Confirm order</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst InjectedCheckoutForm = ({cartProducts, cartTotal}) => {\r\n  return (\r\n    <ElementsConsumer>\r\n      {({stripe, elements}) => (\r\n        <CheckoutForm  stripe={stripe}\r\n          elements={elements}\r\n          cartProducts={cartProducts}\r\n          cartTotal={cartTotal}\r\n          />\r\n      )}\r\n    </ElementsConsumer>\r\n  );\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  cartTotal: state.total.data,\r\n  cartProducts: state.cart.products\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(InjectedCheckoutForm);\r\n"]},"metadata":{},"sourceType":"module"}