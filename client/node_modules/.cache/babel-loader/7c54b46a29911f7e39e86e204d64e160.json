{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John\\\\Desktop\\\\Modern React With Redux Projects\\\\beersandbrewskiesproject\\\\booksandbrewskies\\\\client\\\\src\\\\components\\\\shop\\\\components\\\\checkout\\\\index.js\";\nimport React from 'react';\nimport { ElementsConsumer, CardElement } from '@stripe/react-stripe-js';\nimport { connect } from 'react-redux';\nimport CardSection from './components/CardSection';\nimport IdentitySection from './components/IdentitySection';\nimport AddressSection from './components/AddressSection';\nimport './css/CheckoutFormStyles.css';\nimport Spinner from '../../../spinner';\nimport CartSection from './components/CartSection';\nimport { getSessionStorageUpdateCart } from '../util';\nimport { getStripe, storeOrder } from '../../../../services/order/actions';\nimport { clearCart } from '../../../../services/cart/actions';\nimport { clearCartTotal } from '../../../../services/total/actions';\nimport history from '../../../../history';\nimport Mymodal from '../../../Modal';\nimport { Modal } from 'react-bootstrap';\n\nclass CheckoutForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      name: '',\n      email: '',\n      phone: '',\n      line1: '',\n      city: '',\n      state: '',\n      zip: '',\n      client_secret: '',\n      session_error: false,\n      order_completed: false,\n      payment_failed: false,\n      orderId: '',\n      buttonLoading: false\n    };\n\n    this.componentDidMount = async () => {\n      const _this$props = this.props,\n            cartTotal = _this$props.cartTotal,\n            cartProducts = _this$props.cartProducts;\n      getSessionStorageUpdateCart(cartProducts, cartTotal);\n\n      if (cartProducts.length > 0) {\n        let response;\n\n        try {\n          response = await getStripe(cartTotal, cartProducts);\n        } catch (e) {\n          return this.setState({\n            session_error: true\n          });\n        }\n\n        console.log(response);\n\n        if (response.error) {\n          this.setState({\n            session_error: response.error\n          });\n        } else {\n          this.setState({\n            client_secret: response.data\n          });\n        }\n      }\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); //set loading icon on button\n\n      this.setState({\n        buttonLoading: true\n      });\n      const _this$props2 = this.props,\n            stripe = _this$props2.stripe,\n            elements = _this$props2.elements,\n            cartProducts = _this$props2.cartProducts,\n            cartTotal = _this$props2.cartTotal;\n      const _this$state = this.state,\n            name = _this$state.name,\n            phone = _this$state.phone,\n            email = _this$state.email,\n            line1 = _this$state.line1,\n            city = _this$state.city,\n            state = _this$state.state,\n            zip = _this$state.zip,\n            client_secret = _this$state.client_secret;\n\n      if (!stripe || !elements) {\n        // Stripe.js has not yet loaded.\n        // Make  sure to disable form submission until Stripe.js has loaded.\n        return;\n      }\n\n      try {\n        const result = await stripe.confirmCardPayment(client_secret, {\n          payment_method: {\n            card: elements.getElement(CardElement),\n            billing_details: {\n              name: name,\n              phone: phone,\n              email: email\n            }\n          },\n          shipping: {\n            name: name,\n            phone: phone,\n            address: {\n              line1: line1,\n              city: city,\n              state: state,\n              postal_code: zip\n            }\n          }\n        });\n\n        if (result.error) {\n          this.setState({\n            payment_failed: true\n          });\n        } else {\n          if (result.paymentIntent.status === 'succeeded') {\n            const response = await storeOrder(result.paymentIntent, cartProducts, cartTotal, name, phone, email);\n            console.log(response.data);\n            return;\n\n            if (response.data) {\n              sessionStorage.removeItem('cartTotal');\n              sessionStorage.removeItem('cartProducts');\n              this.props.clearCart();\n              this.props.clearCartTotal();\n              this.setState({\n                order_completed: true,\n                orderId: response.data.chargeId\n              });\n            } else {//failed to store order into database\n              //handle field to store order into the database\n              //It's already in stripe\n              //Send antoher request to database indicating it failed\n            }\n          } else {//paymentIntent is something other than Succeed\n              //handle by sending something to our database or ignore\n            }\n        }\n      } catch (e) {\n        console.log(e);\n        this.setState({\n          session_error: true\n        });\n      }\n    };\n\n    this.handleInputChange = event => {\n      const target = event.target;\n      const value = target.value;\n      const name = target.name;\n      this.setState({\n        [name]: value\n      });\n    };\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          name = _this$state2.name,\n          phone = _this$state2.phone,\n          email = _this$state2.email,\n          line1 = _this$state2.line1,\n          city = _this$state2.city,\n          state = _this$state2.state,\n          zip = _this$state2.zip,\n          client_secret = _this$state2.client_secret,\n          session_error = _this$state2.session_error,\n          order_completed = _this$state2.order_completed,\n          orderId = _this$state2.orderId,\n          buttonLoading = _this$state2.buttonLoading,\n          payment_failed = _this$state2.payment_failed;\n    const _this$props3 = this.props,\n          cartTotal = _this$props3.cartTotal,\n          cartProducts = _this$props3.cartProducts;\n\n    if (order_completed) {\n      const descriptionOrderCompleted = `Your confirmation number is ${orderId}.\n      Check your email for details. If you have any questions or\n      concerns regarding your order please feel free to contact us.`;\n      return React.createElement(Mymodal, {\n        showValue: true,\n        closeDirect: \"/\",\n        buttonName: \"OK\",\n        title: `Thank You ${name}!`,\n        description: descriptionOrderCompleted,\n        svgType: \"success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      });\n    }\n\n    if (cartProducts.length <= 0) {\n      return React.createElement(Mymodal, {\n        showValue: true,\n        closeDirect: \"/store\",\n        buttonName: \"Store\",\n        title: \"Cart Is Empty\",\n        description: \"Go pick something from our store!\",\n        svgType: \"empty\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      });\n    }\n\n    if (session_error) {\n      const clientErrorDescription = `Looks like something went wrong.\n      I apologize for the inconvience. No payment was taken`;\n      return React.createElement(Mymodal, {\n        showValue: true,\n        closeDirect: \"/\",\n        buttonName: \"Close\",\n        title: \"Error\",\n        description: clientErrorDescription,\n        svgType: \"error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      });\n    }\n\n    if (client_secret === '') {\n      return React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      });\n    }\n\n    if (payment_failed) {\n      const descriptionOrderFailed = \"Looks like your card has insufficient funds. No payment was taken.\";\n      return React.createElement(Mymodal, {\n        showValue: true,\n        closeDirect: \"/store/checkout\",\n        handleState: () => this.setState({\n          payment_failed: false,\n          buttonLoading: false\n        }),\n        buttonName: \"Try Again\",\n        title: \"Payment Failed\",\n        description: descriptionOrderFailed,\n        svgType: \"warning\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      });\n    }\n\n    const formStuff = React.createElement(React.Fragment, null, React.createElement(CartSection, {\n      cartProducts: cartProducts,\n      cartTotal: cartTotal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(IdentitySection, {\n      name: name,\n      phone: phone,\n      email: email,\n      handleInputChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }), React.createElement(AddressSection, {\n      line1: line1,\n      city: city,\n      state: state,\n      zip: zip,\n      handleInputChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }), React.createElement(CardSection, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"btn btn-primary btn-block\",\n      disabled: !this.props.stripe,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, buttonLoading && React.createElement(\"span\", {\n      className: \"spinner-border spinner-border-sm\",\n      role: \"status\",\n      \"aria-hidden\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }), \"Confirm To Pay $\", cartTotal.totalPrice)));\n    const walletSvg = React.createElement(\"svg\", {\n      className: \"bi bi-wallet\",\n      style: {\n        position: 'relative',\n        bottom: \"5px\"\n      },\n      width: \"3rem\",\n      height: \"3rem\",\n      viewBox: \"0 0 20 20\",\n      fill: \"currentColor\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, React.createElement(\"path\", {\n      \"fill-rule\": \"evenodd\",\n      d: \"M3.5 5a.5.5 0 00-.5.5v2h5a.5.5 0 01.5.5c0 .253.08.644.306.958.207.288.557.542 1.194.542.637 0 .987-.254 1.194-.542.226-.314.306-.705.306-.958a.5.5 0 01.5-.5h5v-2a.5.5 0 00-.5-.5h-13zM17 8.5h-4.551a2.678 2.678 0 01-.443 1.042c-.393.546-1.043.958-2.006.958-.963 0-1.613-.412-2.006-.958A2.679 2.679 0 017.551 8.5H3v6a.5.5 0 00.5.5h13a.5.5 0 00.5-.5v-6zm-15-3A1.5 1.5 0 013.5 4h13A1.5 1.5 0 0118 5.5v9a1.5 1.5 0 01-1.5 1.5h-13A1.5 1.5 0 012 14.5v-9z\",\n      \"clip-rule\": \"evenodd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }));\n    return React.createElement(Modal, {\n      show: true,\n      onHide: () => history.push('/store'),\n      \"aria-labelledby\": \"contained-modal-title-vcenter\",\n      centered: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      closeButton: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, walletSvg))), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, formStuff));\n  }\n\n}\n\nconst InjectedCheckoutForm = ({\n  cartProducts,\n  cartTotal,\n  clearCart,\n  clearCartTotal\n}) => {\n  return React.createElement(ElementsConsumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258\n    },\n    __self: this\n  }, ({\n    stripe,\n    elements\n  }) => React.createElement(CheckoutForm, {\n    stripe: stripe,\n    elements: elements,\n    cartProducts: cartProducts,\n    cartTotal: cartTotal,\n    clearCart: clearCart,\n    clearCartTotal: clearCartTotal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = state => ({\n  cartTotal: state.total.data,\n  cartProducts: state.cart.products\n});\n\nexport default connect(mapStateToProps, {\n  clearCart,\n  clearCartTotal\n})(InjectedCheckoutForm);","map":{"version":3,"sources":["C:/Users/John/Desktop/Modern React With Redux Projects/beersandbrewskiesproject/booksandbrewskies/client/src/components/shop/components/checkout/index.js"],"names":["React","ElementsConsumer","CardElement","connect","CardSection","IdentitySection","AddressSection","Spinner","CartSection","getSessionStorageUpdateCart","getStripe","storeOrder","clearCart","clearCartTotal","history","Mymodal","Modal","CheckoutForm","Component","state","name","email","phone","line1","city","zip","client_secret","session_error","order_completed","payment_failed","orderId","buttonLoading","componentDidMount","props","cartTotal","cartProducts","length","response","e","setState","console","log","error","data","handleSubmit","event","preventDefault","stripe","elements","result","confirmCardPayment","payment_method","card","getElement","billing_details","shipping","address","postal_code","paymentIntent","status","sessionStorage","removeItem","chargeId","handleInputChange","target","value","render","descriptionOrderCompleted","clientErrorDescription","descriptionOrderFailed","formStuff","totalPrice","walletSvg","position","bottom","push","InjectedCheckoutForm","mapStateToProps","total","cart","products"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {ElementsConsumer, CardElement} from '@stripe/react-stripe-js';\r\nimport { connect } from 'react-redux';\r\nimport CardSection from './components/CardSection';\r\nimport IdentitySection from './components/IdentitySection';\r\nimport AddressSection from './components/AddressSection';\r\nimport './css/CheckoutFormStyles.css';\r\nimport Spinner from '../../../spinner'\r\nimport CartSection from './components/CartSection';\r\nimport { getSessionStorageUpdateCart } from '../util';\r\nimport { getStripe, storeOrder } from '../../../../services/order/actions';\r\nimport { clearCart } from '../../../../services/cart/actions';\r\nimport { clearCartTotal } from '../../../../services/total/actions';\r\nimport history from '../../../../history';\r\nimport Mymodal from '../../../Modal';\r\nimport {Modal} from 'react-bootstrap';\r\n\r\nclass CheckoutForm extends React.Component {\r\n\r\n  state = {\r\n    name: '',\r\n    email: '',\r\n    phone: '',\r\n    line1: '',\r\n    city: '',\r\n    state: '',\r\n    zip: '',\r\n    client_secret: '',\r\n    session_error: false,\r\n    order_completed: false,\r\n    payment_failed: false,\r\n    orderId: '',\r\n    buttonLoading: false\r\n  }\r\n\r\n  componentDidMount = async() => {\r\n    const {cartTotal, cartProducts} = this.props;\r\n    getSessionStorageUpdateCart(cartProducts, cartTotal);\r\n    if(cartProducts.length > 0 ){\r\n\r\n      let response;\r\n\r\n      try{\r\n         response = await getStripe(cartTotal, cartProducts);\r\n      }catch(e){\r\n        return this.setState({session_error: true});\r\n      }\r\n\r\n      console.log(response);\r\n\r\n      if(response.error){\r\n        this.setState({session_error: response.error});\r\n      }else{\r\n        this.setState({client_secret: response.data});\r\n      }\r\n    }\r\n  }\r\n\r\n  handleSubmit = async (event) => {\r\n\r\n    event.preventDefault();\r\n\r\n    //set loading icon on button\r\n    this.setState({buttonLoading: true});\r\n\r\n    const {stripe, elements, cartProducts, cartTotal} = this.props\r\n    const {name, phone, email, line1, city, state, zip, client_secret} = this.state;\r\n\r\n    if (!stripe || !elements) {\r\n      // Stripe.js has not yet loaded.\r\n      // Make  sure to disable form submission until Stripe.js has loaded.\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const result = await stripe.confirmCardPayment(client_secret, {\r\n        payment_method: {\r\n          card: elements.getElement(CardElement),\r\n          billing_details: {\r\n            name: name,\r\n            phone: phone,\r\n            email: email\r\n          },\r\n        },\r\n        shipping: {\r\n          name: name,\r\n          phone: phone,\r\n          address: {\r\n            line1: line1,\r\n            city: city,\r\n            state: state,\r\n            postal_code: zip\r\n          }\r\n        }\r\n      });\r\n\r\n      if (result.error) {\r\n        this.setState({ payment_failed: true });\r\n      } else {\r\n        if (result.paymentIntent.status === 'succeeded') {\r\n\r\n          const response = await storeOrder(\r\n            result.paymentIntent,\r\n            cartProducts,\r\n            cartTotal,\r\n            name,\r\n            phone,\r\n            email);\r\n\r\n            console.log(response.data);\r\n            return;\r\n\r\n            if(response.data){\r\n              sessionStorage.removeItem('cartTotal');\r\n              sessionStorage.removeItem('cartProducts');\r\n              this.props.clearCart();\r\n              this.props.clearCartTotal();\r\n              this.setState({ order_completed: true, orderId: response.data.chargeId });\r\n            }else{\r\n              //failed to store order into database\r\n              //handle field to store order into the database\r\n              //It's already in stripe\r\n              //Send antoher request to database indicating it failed\r\n            }\r\n        }else{\r\n          //paymentIntent is something other than Succeed\r\n          //handle by sending something to our database or ignore\r\n        }\r\n      }\r\n    }catch(e){\r\n      console.log(e);\r\n      this.setState({session_error: true});\r\n    }\r\n  };\r\n\r\n  handleInputChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { name, phone, email, line1, city, state, zip, client_secret, session_error, order_completed, orderId, buttonLoading, payment_failed } = this.state;\r\n    const { cartTotal, cartProducts } = this.props;\r\n\r\n    if(order_completed){\r\n      const descriptionOrderCompleted = `Your confirmation number is ${orderId}.\r\n      Check your email for details. If you have any questions or\r\n      concerns regarding your order please feel free to contact us.`;\r\n\r\n      return(\r\n        <Mymodal\r\n        showValue={true}\r\n        closeDirect = '/'\r\n        buttonName = 'OK'\r\n        title={`Thank You ${name}!`}\r\n        description= {descriptionOrderCompleted}\r\n        svgType=\"success\"\r\n        />\r\n      )\r\n    }\r\n\r\n    if(cartProducts.length <= 0) {\r\n      return (\r\n            <Mymodal\r\n            showValue={true}\r\n            closeDirect = '/store'\r\n            buttonName = 'Store'\r\n            title='Cart Is Empty'\r\n            description= 'Go pick something from our store!'\r\n            svgType=\"empty\"\r\n            />\r\n      );\r\n    }\r\n\r\n    if(session_error){\r\n      const clientErrorDescription = `Looks like something went wrong.\r\n      I apologize for the inconvience. No payment was taken`;\r\n      return (\r\n            <Mymodal\r\n            showValue={true}\r\n            closeDirect = '/'\r\n            buttonName = 'Close'\r\n            title='Error'\r\n            description= {clientErrorDescription}\r\n            svgType=\"error\"\r\n            />\r\n      );\r\n    }\r\n\r\n    if(client_secret === ''){\r\n        return <Spinner />;\r\n    }\r\n\r\n    if(payment_failed){\r\n      const descriptionOrderFailed = \"Looks like your card has insufficient funds. No payment was taken.\";\r\n      return (\r\n        <Mymodal\r\n        showValue={true}\r\n        closeDirect = '/store/checkout'\r\n        handleState = {() => this.setState({payment_failed: false, buttonLoading: false})}\r\n        buttonName = 'Try Again'\r\n        title='Payment Failed'\r\n        description= {descriptionOrderFailed}\r\n        svgType=\"warning\"\r\n        />\r\n      )\r\n    }\r\n\r\n    const formStuff = (\r\n      <>\r\n      <CartSection cartProducts={cartProducts} cartTotal={cartTotal} />\r\n          <form onSubmit={this.handleSubmit}>\r\n            <IdentitySection name={name} phone={phone} email={email} handleInputChange={this.handleInputChange}/>\r\n            <AddressSection line1={line1} city={city} state={state} zip={zip} handleInputChange={this.handleInputChange} />\r\n            <CardSection />\r\n              <button className=\"btn btn-primary btn-block\" disabled={!this.props.stripe}>\r\n                {buttonLoading && <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> }\r\n                Confirm To Pay ${cartTotal.totalPrice}\r\n              </button>\r\n          </form>\r\n      </>\r\n    );\r\n\r\n    const walletSvg = (\r\n      <svg className=\"bi bi-wallet\" style={{position:'relative', bottom: \"5px\"}} width=\"3rem\" height=\"3rem\" viewBox=\"0 0 20 20\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path fill-rule=\"evenodd\" d=\"M3.5 5a.5.5 0 00-.5.5v2h5a.5.5 0 01.5.5c0 .253.08.644.306.958.207.288.557.542 1.194.542.637 0 .987-.254 1.194-.542.226-.314.306-.705.306-.958a.5.5 0 01.5-.5h5v-2a.5.5 0 00-.5-.5h-13zM17 8.5h-4.551a2.678 2.678 0 01-.443 1.042c-.393.546-1.043.958-2.006.958-.963 0-1.613-.412-2.006-.958A2.679 2.679 0 017.551 8.5H3v6a.5.5 0 00.5.5h13a.5.5 0 00.5-.5v-6zm-15-3A1.5 1.5 0 013.5 4h13A1.5 1.5 0 0118 5.5v9a1.5 1.5 0 01-1.5 1.5h-13A1.5 1.5 0 012 14.5v-9z\" clip-rule=\"evenodd\">\r\n        </path>\r\n      </svg>\r\n    );\r\n\r\n    return (\r\n      <Modal show={true}\r\n        onHide={() => history.push('/store')}\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>\r\n          <div className=\"row\">\r\n          {walletSvg}\r\n          </div>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>{formStuff}</Modal.Body>\r\n      </Modal>\r\n    );\r\n\r\n  }\r\n}\r\n\r\nconst InjectedCheckoutForm = ({cartProducts, cartTotal, clearCart, clearCartTotal}) => {\r\n  return (\r\n    <ElementsConsumer>\r\n      {({stripe, elements}) => (\r\n        <CheckoutForm  stripe={stripe}\r\n          elements={elements}\r\n          cartProducts={cartProducts}\r\n          cartTotal={cartTotal}\r\n          clearCart={clearCart}\r\n          clearCartTotal={clearCartTotal}\r\n          />\r\n      )}\r\n    </ElementsConsumer>\r\n  );\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  cartTotal: state.total.data,\r\n  cartProducts: state.cart.products\r\n});\r\n\r\nexport default connect(mapStateToProps, {clearCart, clearCartTotal})(InjectedCheckoutForm);\r\n"]},"metadata":{},"sourceType":"module"}