{"ast":null,"code":"import axios from 'axios';\nexport const getStripe = (cartTotal, cartProducts) => {\n  const products = cartProducts.map(p => {\n    return {\n      id: p.id,\n      sku: p.sku,\n      title: p.title,\n      description: p.description,\n      price: p.price,\n      quantity: p.quantity\n    };\n  });\n  const order = {\n    amount: cartTotal.totalPrice * 100,\n    currency: cartTotal.currencyId,\n    description: JSON.stringify(products)\n  };\n  let response;\n\n  try {\n    response = axios.get('/shop/checkout', {\n      params: {\n        order\n      }\n    });\n  } catch (error) {\n    if (error.response) {\n      // Request made and server responded\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n\n    return {\n      error: true\n    };\n  }\n\n  return response;\n};\nexport const storeOrder = async (paymentIntent, cartProducts, cartTotal, name, phone) => {\n  const products = cartProducts.map(p => {\n    return {\n      id: p.id,\n      sku: p.sku,\n      title: p.title,\n      description: p.description,\n      price: p.price,\n      quantity: p.quantity\n    };\n  });\n  const order = {\n    chargeId: paymentIntent.id,\n    name: name,\n    phone: phone,\n    email: paymentIntent.email,\n    amount: cartTotal.totalPrice,\n    chargeAmount: paymentIntent.amount,\n    currency: cartTotal.currencyId,\n    order: products,\n    chargeDescription: paymentIntent.description,\n    shippingAddress: paymentIntent.shipping,\n    paymentStatus: paymentIntent.status\n  };\n  let response;\n\n  try {\n    response = await axios.post('shop/checkout', order);\n  } catch (error) {\n    if (error.response) {\n      // Request made and server responded\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n\n    return {\n      error: true\n    };\n  }\n\n  return response;\n};","map":{"version":3,"sources":["C:/Users/John/Desktop/Modern React With Redux Projects/beersandbrewskies/beersandbrewskies/src/services/order/actions.js"],"names":["axios","getStripe","cartTotal","cartProducts","products","map","p","id","sku","title","description","price","quantity","order","amount","totalPrice","currency","currencyId","JSON","stringify","response","get","params","error","console","log","data","status","headers","request","message","storeOrder","paymentIntent","name","phone","chargeId","email","chargeAmount","chargeDescription","shippingAddress","shipping","paymentStatus","post"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\n\r\nexport const getStripe = (cartTotal, cartProducts) => {\r\n\r\n  const products = cartProducts.map(p => {\r\n    return ({id: p.id,\r\n    sku: p.sku,\r\n    title: p.title,\r\n    description: p.description,\r\n    price: p.price,\r\n    quantity: p.quantity})\r\n  });\r\n\r\n  const order = {\r\n    amount: cartTotal.totalPrice * 100,\r\n    currency: cartTotal.currencyId,\r\n    description: JSON.stringify(products)\r\n  }\r\n\r\n  let response;\r\n\r\n  try {\r\n         response = axios.get('/shop/checkout',\r\n         {\r\n          params: {order}\r\n      });\r\n } catch (error) {\r\n    if (error.response) {\r\n      // Request made and server responded\r\n      console.log(error.response.data);\r\n      console.log(error.response.status);\r\n      console.log(error.response.headers);\r\n    } else if (error.request) {\r\n      // The request was made but no response was received\r\n      console.log(error.request);\r\n    } else {\r\n      // Something happened in setting up the request that triggered an Error\r\n      console.log('Error', error.message);\r\n    }\r\n    return {error: true};\r\n  }\r\n  return response;\r\n}\r\n\r\nexport const storeOrder = async(paymentIntent, cartProducts, cartTotal, name, phone) => {\r\n\r\n  const products = cartProducts.map(p => {\r\n    return ({id: p.id,\r\n    sku: p.sku,\r\n    title: p.title,\r\n    description: p.description,\r\n    price: p.price,\r\n    quantity: p.quantity})\r\n  });\r\n\r\n  const order = {\r\n    chargeId : paymentIntent.id,\r\n    name: name,\r\n    phone: phone,\r\n    email: paymentIntent.email,\r\n    amount: cartTotal.totalPrice,\r\n    chargeAmount: paymentIntent.amount,\r\n    currency: cartTotal.currencyId,\r\n    order: products,\r\n    chargeDescription: paymentIntent.description,\r\n    shippingAddress: paymentIntent.shipping,\r\n    paymentStatus: paymentIntent.status\r\n  };\r\n\r\n  let response\r\n\r\n  try {\r\n    response = await axios.post('shop/checkout', order);\r\n  } catch(error) {\r\n     if (error.response) {\r\n       // Request made and server responded\r\n       console.log(error.response.data);\r\n       console.log(error.response.status);\r\n       console.log(error.response.headers);\r\n     } else if (error.request) {\r\n       // The request was made but no response was received\r\n       console.log(error.request);\r\n     } else {\r\n       // Something happened in setting up the request that triggered an Error\r\n       console.log('Error', error.message);\r\n     }\r\n     return {error: true};\r\n   }\r\n\r\n   return response;\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}