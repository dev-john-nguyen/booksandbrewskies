{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John\\\\Desktop\\\\Modern React With Redux Projects\\\\beersandbrewskies\\\\beersandbrewskies\\\\src\\\\components\\\\shop\\\\components\\\\FloatCart.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport CartProduct from './CartProduct';\nimport { updateCartTotalTotal, loadCart, removeProduct, changeProductQuantity } from '../../../actions';\nimport history from '../../../history';\nimport { formatPrice } from './formatPrice';\nimport './style.scss';\n\nclass FloatCart extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      newProduct: this.props.newProduct,\n      productToChange: this.props.productToChange,\n      productToRemove: this.props.productToRemove,\n      isOpen: false\n    };\n\n    this.openFloatCart = () => {\n      this.setState({\n        isOpen: true\n      });\n    };\n\n    this.closeFloatCart = () => {\n      this.setState({\n        isOpen: false\n      });\n    };\n\n    this.addProduct = product => {\n      const _this$props = this.props,\n            cartProducts = _this$props.cartProducts,\n            updateCartTotal = _this$props.updateCartTotal;\n      let productAlreadyInCart = false;\n      cartProducts.forEach(cp => {\n        if (cp.id === product.id) {\n          cp.quantity += product.quantity;\n          productAlreadyInCart = true;\n        }\n      });\n\n      if (!productAlreadyInCart) {\n        cartProducts.push(product);\n      }\n\n      updateCartTotal(cartProducts);\n      this.openFloatCart();\n    };\n\n    this.removeProduct = product => {\n      const _this$props2 = this.props,\n            cartProducts = _this$props2.cartProducts,\n            updateCartTotal = _this$props2.updateCartTotal;\n      const index = cartProducts.findIndex(p => p.id === product.id);\n\n      if (index >= 0) {\n        cartProducts.splice(index, 1);\n        updateCartTotal(cartProducts);\n      }\n    };\n\n    this.proceedToCheckout = () => {\n      const _this$props$cartTotal = this.props.cartTotal,\n            totalPrice = _this$props$cartTotal.totalPrice,\n            productQuantity = _this$props$cartTotal.productQuantity,\n            currencyFormat = _this$props$cartTotal.currencyFormat,\n            currencyId = _this$props$cartTotal.currencyId;\n\n      if (!productQuantity) {\n        alert('Add some product in the cart!');\n      } else {\n        alert(`Checkout - Subtotal: ${currencyFormat} ${formatPrice(totalPrice, currencyId)}`);\n      }\n    };\n\n    this.changeProductQuantity = changedProduct => {\n      const _this$props3 = this.props,\n            cartProducts = _this$props3.cartProducts,\n            updateCartTotal = _this$props3.updateCartTotal;\n      const product = cartProducts.find(p => p.id === changedProduct.id);\n      product.quantity = changedProduct.quantity;\n\n      if (product.quantity <= 0) {\n        this.removeProduct(product);\n      }\n\n      updateCartTotal(cartProducts);\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.newProduct !== prevState.newProduct) {\n      return {\n        newProduct: nextProps.newProduct\n      };\n    }\n\n    if (nextProps.productToRemove !== prevState.productToRemove) {\n      return {\n        productToRemove: nextProps.productToRemove\n      };\n    }\n\n    if (nextProps.productToChange !== prevState.productToChange) {\n      return {\n        productToChange: nextProps.productToChange\n      };\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.newProduct !== this.state.newProduct) {\n      this.addProduct(this.state.newProduct);\n    }\n\n    if (prevState.productToRemove !== this.state.productToRemove) {\n      this.removeProduct(this.state.productToRemove);\n    }\n\n    if (prevState.productToChange !== this.state.productToChange) {\n      this.changeProductQuantity(this.state.productToChange);\n    }\n  }\n\n  render() {\n    const _this$props4 = this.props,\n          cartTotal = _this$props4.cartTotal,\n          cartProducts = _this$props4.cartProducts,\n          removeProduct = _this$props4.removeProduct,\n          changeProductQuantity = _this$props4.changeProductQuantity;\n    const products = cartProducts.map(p => {\n      return React.createElement(CartProduct, {\n        product: p,\n        removeProduct: removeProduct,\n        changeProductQuantity: changeProductQuantity,\n        key: p.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      });\n    });\n    let classes = ['float-cart'];\n\n    if (!!this.state.isOpen) {\n      classes.push('float-cart--open');\n    }\n\n    return React.createElement(\"div\", {\n      className: classes.join(' '),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, this.state.isOpen && React.createElement(\"div\", {\n      onClick: () => this.closeFloatCart(),\n      className: \"float-cart__close-btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"X\"), !this.state.isOpen && React.createElement(\"span\", {\n      onClick: () => this.openFloatCart(),\n      className: \"bag bag--float-cart-closed\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"bag__quantity\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, cartTotal.productQuantity)), React.createElement(\"div\", {\n      className: \"float-cart__content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"float-cart__header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"bag\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"bag__quantity\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, cartTotal.productQuantity)), React.createElement(\"span\", {\n      className: \"header-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"Cart\")), React.createElement(\"div\", {\n      className: \"float-cart__shelf-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, products, !products.length && React.createElement(\"p\", {\n      className: \"shelf-empty\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \"Add some products in the cart \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), \":)\")), React.createElement(\"div\", {\n      className: \"float-cart__footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"sub\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \"SUBTOTAL\"), React.createElement(\"div\", {\n      className: \"sub-price\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"sub-price__val\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, `${cartTotal.currencyFormat} ${formatPrice(cartTotal.totalPrice, cartTotal.currencyId)}`), React.createElement(\"small\", {\n      className: \"sub-price__installment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, !!cartTotal.installments && React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, `OR UP TO ${cartTotal.installments} x ${cartTotal.currencyFormat} ${formatPrice(cartTotal.totalPrice / cartTotal.installments, cartTotal.currencyId)}`))), React.createElement(\"div\", {\n      onClick: () => this.proceedToCheckout(),\n      className: \"buy-btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"Checkout\"))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  cartProducts: state.cart.products,\n  newProduct: state.cart.productToAdd,\n  productToRemove: state.cart.productToRemove,\n  productToChange: state.cart.productToChange,\n  cartTotal: state.cartTotal.Total\n});\n\nexport default connect(mapStateToProps, {\n  updateCartTotalTotal,\n  loadCart,\n  removeProduct,\n  changeProductQuantity\n})(FloatCart);","map":{"version":3,"sources":["C:/Users/John/Desktop/Modern React With Redux Projects/beersandbrewskies/beersandbrewskies/src/components/shop/components/FloatCart.js"],"names":["React","connect","CartProduct","updateCartTotalTotal","loadCart","removeProduct","changeProductQuantity","history","formatPrice","FloatCart","Component","state","newProduct","props","productToChange","productToRemove","isOpen","openFloatCart","setState","closeFloatCart","addProduct","product","cartProducts","updateCartTotal","productAlreadyInCart","forEach","cp","id","quantity","push","index","findIndex","p","splice","proceedToCheckout","cartTotal","totalPrice","productQuantity","currencyFormat","currencyId","alert","changedProduct","find","getDerivedStateFromProps","nextProps","prevState","componentDidUpdate","prevProps","render","products","map","classes","join","length","installments","mapStateToProps","cart","productToAdd","Total"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CartProduct from './CartProduct';\r\nimport { updateCartTotalTotal, loadCart, removeProduct, changeProductQuantity } from '../../../actions';\r\nimport history from '../../../history';\r\nimport { formatPrice } from './formatPrice';\r\nimport './style.scss';\r\n\r\nclass FloatCart extends React.Component {\r\n  state = {\r\n    newProduct: this.props.newProduct,\r\n    productToChange: this.props.productToChange,\r\n    productToRemove: this.props.productToRemove,\r\n    isOpen: false\r\n  };\r\n\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n\r\n    if (nextProps.newProduct !== prevState.newProduct) {\r\n      return { newProduct : nextProps.newProduct }\r\n    }\r\n\r\n    if(nextProps.productToRemove !== prevState.productToRemove){\r\n      return { productToRemove: nextProps.productToRemove };\r\n    }\r\n\r\n    if (nextProps.productToChange !== prevState.productToChange) {\r\n      return { productToChange: nextProps.productToChange };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState){\r\n    if(prevState.newProduct !== this.state.newProduct){\r\n      this.addProduct(this.state.newProduct);\r\n    }\r\n\r\n    if (prevState.productToRemove !== this.state.productToRemove) {\r\n      this.removeProduct(this.state.productToRemove);\r\n    }\r\n\r\n    if (prevState.productToChange !== this.state.productToChange) {\r\n      this.changeProductQuantity(this.state.productToChange);\r\n    }\r\n  }\r\n\r\n  openFloatCart = () => {\r\n    this.setState({ isOpen: true });\r\n  };\r\n\r\n  closeFloatCart = () => {\r\n    this.setState({ isOpen: false });\r\n  };\r\n\r\n  addProduct = product => {\r\n    const { cartProducts, updateCartTotal } = this.props;\r\n    let productAlreadyInCart = false;\r\n\r\n    cartProducts.forEach(cp => {\r\n      if (cp.id === product.id) {\r\n        cp.quantity += product.quantity;\r\n        productAlreadyInCart = true;\r\n      }\r\n    });\r\n\r\n    if (!productAlreadyInCart) {\r\n      cartProducts.push(product);\r\n    }\r\n\r\n    updateCartTotal(cartProducts);\r\n    this.openFloatCart();\r\n  };\r\n\r\n  removeProduct = product => {\r\n    const { cartProducts, updateCartTotal } = this.props;\r\n\r\n    const index = cartProducts.findIndex(p => p.id === product.id);\r\n    if (index >= 0) {\r\n      cartProducts.splice(index, 1);\r\n      updateCartTotal(cartProducts);\r\n    }\r\n  };\r\n\r\n  proceedToCheckout = () => {\r\n    const {\r\n      totalPrice,\r\n      productQuantity,\r\n      currencyFormat,\r\n      currencyId\r\n    } = this.props.cartTotal;\r\n\r\n    if (!productQuantity) {\r\n      alert('Add some product in the cart!');\r\n    } else {\r\n      alert(\r\n        `Checkout - Subtotal: ${currencyFormat} ${formatPrice(\r\n          totalPrice,\r\n          currencyId\r\n        )}`\r\n      );\r\n    }\r\n  };\r\n\r\n  changeProductQuantity = changedProduct => {\r\n    const { cartProducts, updateCartTotal } = this.props;\r\n\r\n    const product = cartProducts.find(p => p.id === changedProduct.id);\r\n    product.quantity = changedProduct.quantity;\r\n    if (product.quantity <= 0) {\r\n      this.removeProduct(product);\r\n    }\r\n    updateCartTotal(cartProducts);\r\n  }\r\n\r\n  render() {\r\n    const { cartTotal, cartProducts, removeProduct, changeProductQuantity } = this.props;\r\n\r\n    const products = cartProducts.map(p => {\r\n      return (\r\n        <CartProduct product={p} removeProduct={removeProduct} changeProductQuantity={changeProductQuantity} key={p.id} />\r\n      );\r\n    });\r\n\r\n    let classes = ['float-cart'];\r\n\r\n    if (!!this.state.isOpen) {\r\n      classes.push('float-cart--open');\r\n    }\r\n\r\n    return (\r\n      <div className={classes.join(' ')}>\r\n        {/* If cart open, show close (x) button */}\r\n        {this.state.isOpen && (\r\n          <div\r\n            onClick={() => this.closeFloatCart()}\r\n            className=\"float-cart__close-btn\"\r\n          >\r\n            X\r\n          </div>\r\n        )}\r\n\r\n        {/* If cart is closed, show bag with quantity of product and open cart action */}\r\n        {!this.state.isOpen && (\r\n          <span\r\n            onClick={() => this.openFloatCart()}\r\n            className=\"bag bag--float-cart-closed\"\r\n          >\r\n            <span className=\"bag__quantity\">{cartTotal.productQuantity}</span>\r\n          </span>\r\n        )}\r\n\r\n        <div className=\"float-cart__content\">\r\n          <div className=\"float-cart__header\">\r\n            <span className=\"bag\">\r\n              <span className=\"bag__quantity\">{cartTotal.productQuantity}</span>\r\n            </span>\r\n            <span className=\"header-title\">Cart</span>\r\n          </div>\r\n\r\n          <div className=\"float-cart__shelf-container\">\r\n            {products}\r\n            {!products.length && (\r\n              <p className=\"shelf-empty\">\r\n                Add some products in the cart <br />\r\n                :)\r\n              </p>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"float-cart__footer\">\r\n            <div className=\"sub\">SUBTOTAL</div>\r\n            <div className=\"sub-price\">\r\n              <p className=\"sub-price__val\">\r\n                {`${cartTotal.currencyFormat} ${formatPrice(\r\n                  cartTotal.totalPrice,\r\n                  cartTotal.currencyId\r\n                )}`}\r\n              </p>\r\n              <small className=\"sub-price__installment\">\r\n                {!!cartTotal.installments && (\r\n                  <span>\r\n                    {`OR UP TO ${cartTotal.installments} x ${\r\n                      cartTotal.currencyFormat\r\n                    } ${formatPrice(\r\n                      cartTotal.totalPrice / cartTotal.installments,\r\n                      cartTotal.currencyId\r\n                    )}`}\r\n                  </span>\r\n                )}\r\n              </small>\r\n            </div>\r\n            <div onClick={() => this.proceedToCheckout()} className=\"buy-btn\">\r\n              Checkout\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  cartProducts: state.cart.products,\r\n  newProduct: state.cart.productToAdd,\r\n  productToRemove: state.cart.productToRemove,\r\n  productToChange: state.cart.productToChange,\r\n  cartTotal: state.cartTotal.Total\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {updateCartTotalTotal, loadCart, removeProduct, changeProductQuantity}\r\n)(FloatCart);\r\n"]},"metadata":{},"sourceType":"module"}