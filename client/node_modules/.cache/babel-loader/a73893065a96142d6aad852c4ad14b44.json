{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John\\\\Desktop\\\\Modern React With Redux Projects\\\\beersandbrewskies\\\\beersandbrewskies\\\\src\\\\components\\\\shop\\\\components\\\\checkout\\\\index.js\";\nimport React from 'react';\nimport { ElementsConsumer, CardElement } from '@stripe/react-stripe-js';\nimport { connect } from 'react-redux';\nimport CardSection from './components/CardSection';\nimport IdentitySection from './components/IdentitySection';\nimport AddressSection from './components/AddressSection';\nimport './css/CheckoutFormStyles.css';\nimport axios from 'axios';\nimport Spinner from '../../../spinner';\nimport CartSection from './components/CartSection';\nimport { updateCart } from '../util';\n\nclass CheckoutForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      name: '',\n      email: '',\n      phone: '',\n      line1: '',\n      city: '',\n      state: '',\n      zip: '',\n      client_secret: ''\n    };\n\n    this.componentDidMount = async () => {\n      // let response;\n      // try {\n      //  response = await axios.get('/shop/checkout');\n      // } catch (e) {\n      // return console.log(e);\n      // }\n      //\n      // if(response.data){\n      //   this.setState({client_secret: response.data})\n      // }\n      this.updateCart();\n    };\n\n    this.updateCart = () => {\n      const cartProductsLs = JSON.parse(localStorage.getItem('cartProducts'));\n      const cartTotalLs = JSON.parse(localStorage.getItem('cartTotal'));\n      const _this$props = this.props,\n            cartProducts = _this$props.cartProducts,\n            cartTotal = _this$props.cartTotal;\n\n      if (cartProductsLs && cartTotalLs) {\n        if (cartProductsLs.length > 0) {\n          Object.assign(cartProducts, cartProductsLs);\n          Object.assign(cartTotal, cartTotalLs);\n        }\n      }\n    };\n\n    this.handleSubmit = async event => {\n      // We don't want to let default form submission happen here,\n      // which would refresh the page.\n      event.preventDefault();\n      console.log(\"Called\");\n      const _this$props2 = this.props,\n            stripe = _this$props2.stripe,\n            elements = _this$props2.elements;\n      const _this$state = this.state,\n            name = _this$state.name,\n            phone = _this$state.phone,\n            email = _this$state.email,\n            line1 = _this$state.line1,\n            city = _this$state.city,\n            state = _this$state.state,\n            zip = _this$state.zip;\n\n      if (!stripe || !elements) {\n        // Stripe.js has not yet loaded.\n        // Make  sure to disable form submission until Stripe.js has loaded.\n        return;\n      }\n\n      const result = await stripe.confirmCardPayment(this.state.client_secret, {\n        payment_method: {\n          card: elements.getElement(CardElement),\n          billing_details: {\n            name: name,\n            phone: phone,\n            email: email,\n            line1: line1,\n            city: city,\n            state: state,\n            zip: zip\n          }\n        }\n      });\n\n      if (result.error) {\n        // Show error to your customer (e.g., insufficient funds)\n        console.log(result.error.message);\n      } else {\n        // The payment has been processed!\n        if (result.paymentIntent.status === 'succeeded') {\n          // Show a success message to your customer\n          // There's a risk of the customer closing the window before callback\n          // execution. Set up a webhook or plugin to listen for the\n          // payment_intent.succeeded event that handles any business critical\n          // post-payment actions.\n          const storeOrder = await axios.post('/shop/checkout/success');\n          storeOrder.then().catch(); //Display message\n          //Payment Succeeded and StoredOrder in the database\n        }\n      }\n    };\n\n    this.handleInputChange = event => {\n      const target = event.target;\n      const value = target.value;\n      const name = target.name;\n      this.setState({\n        [name]: value\n      });\n    };\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          name = _this$state2.name,\n          phone = _this$state2.phone,\n          email = _this$state2.email,\n          line1 = _this$state2.line1,\n          city = _this$state2.city,\n          state = _this$state2.state,\n          zip = _this$state2.zip;\n    const _this$props3 = this.props,\n          cartTotal = _this$props3.cartTotal,\n          cartProducts = _this$props3.cartProducts; // if(this.state.client_secret === ''){\n    //   return <Spinner />;\n    // }\n\n    return React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-md-4 order-md-2 mb-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(CartSection, {\n      cartTotal: cartTotal,\n      cartProducts: cartProducts,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"col-md-8 order-md-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(IdentitySection, {\n      name: name,\n      phone: phone,\n      email: email,\n      handleInputChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(AddressSection, {\n      line1: line1,\n      city: city,\n      state: state,\n      zip: zip,\n      handleInputChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(CardSection, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      disabled: !this.props.stripe,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Confirm order\"))));\n  }\n\n}\n\nconst InjectedCheckoutForm = ({\n  cartProducts,\n  cartTotal\n}) => {\n  return React.createElement(ElementsConsumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, ({\n    stripe,\n    elements\n  }) => React.createElement(CheckoutForm, {\n    stripe: stripe,\n    elements: elements,\n    cartProducts: cartProducts,\n    cartTotal: cartTotal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = state => ({\n  cartTotal: state.total.data,\n  cartProducts: state.cart.products\n});\n\nexport default connect(mapStateToProps, {})(InjectedCheckoutForm);","map":{"version":3,"sources":["C:/Users/John/Desktop/Modern React With Redux Projects/beersandbrewskies/beersandbrewskies/src/components/shop/components/checkout/index.js"],"names":["React","ElementsConsumer","CardElement","connect","CardSection","IdentitySection","AddressSection","axios","Spinner","CartSection","updateCart","CheckoutForm","Component","state","name","email","phone","line1","city","zip","client_secret","componentDidMount","cartProductsLs","JSON","parse","localStorage","getItem","cartTotalLs","props","cartProducts","cartTotal","length","Object","assign","handleSubmit","event","preventDefault","console","log","stripe","elements","result","confirmCardPayment","payment_method","card","getElement","billing_details","error","message","paymentIntent","status","storeOrder","post","then","catch","handleInputChange","target","value","setState","render","InjectedCheckoutForm","mapStateToProps","total","data","cart","products"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {ElementsConsumer, CardElement} from '@stripe/react-stripe-js';\r\nimport { connect } from 'react-redux';\r\nimport CardSection from './components/CardSection';\r\nimport IdentitySection from './components/IdentitySection';\r\nimport AddressSection from './components/AddressSection';\r\nimport './css/CheckoutFormStyles.css';\r\nimport axios from 'axios';\r\nimport Spinner from '../../../spinner'\r\nimport CartSection from './components/CartSection';\r\nimport { updateCart } from '../util';\r\n\r\nclass CheckoutForm extends React.Component {\r\n\r\n  state = {\r\n    name: '',\r\n    email: '',\r\n    phone: '',\r\n    line1: '',\r\n    city: '',\r\n    state: '',\r\n    zip: '',\r\n    client_secret: '',\r\n  }\r\n\r\n  componentDidMount = async() => {\r\n    // let response;\r\n    // try {\r\n    //  response = await axios.get('/shop/checkout');\r\n    // } catch (e) {\r\n    // return console.log(e);\r\n    // }\r\n    //\r\n    // if(response.data){\r\n    //   this.setState({client_secret: response.data})\r\n    // }\r\n\r\n    this.updateCart();\r\n\r\n  }\r\n\r\n  updateCart = () => {\r\n    const cartProductsLs = JSON.parse(localStorage.getItem('cartProducts'));\r\n    const cartTotalLs = JSON.parse(localStorage.getItem('cartTotal'));\r\n    const { cartProducts, cartTotal } = this.props;\r\n      if(cartProductsLs && cartTotalLs){\r\n        if(cartProductsLs.length > 0){\r\n          Object.assign(cartProducts, cartProductsLs);\r\n          Object.assign(cartTotal, cartTotalLs);\r\n        }\r\n      }\r\n    }\r\n\r\n  handleSubmit = async (event) => {\r\n    // We don't want to let default form submission happen here,\r\n    // which would refresh the page.\r\n    event.preventDefault();\r\n\r\n    console.log(\"Called\");\r\n\r\n    const {stripe, elements} = this.props\r\n    const {name, phone, email, line1, city, state, zip} = this.state;\r\n\r\n    if (!stripe || !elements) {\r\n      // Stripe.js has not yet loaded.\r\n      // Make  sure to disable form submission until Stripe.js has loaded.\r\n      return;\r\n    }\r\n\r\n    const result = await stripe.confirmCardPayment(this.state.client_secret, {\r\n      payment_method: {\r\n        card: elements.getElement(CardElement),\r\n        billing_details: {\r\n          name: name,\r\n          phone: phone,\r\n          email: email,\r\n          line1: line1,\r\n          city: city,\r\n          state: state,\r\n          zip: zip\r\n        },\r\n      }\r\n    });\r\n\r\n    if (result.error) {\r\n      // Show error to your customer (e.g., insufficient funds)\r\n      console.log(result.error.message);\r\n    } else {\r\n      // The payment has been processed!\r\n      if (result.paymentIntent.status === 'succeeded') {\r\n        // Show a success message to your customer\r\n        // There's a risk of the customer closing the window before callback\r\n        // execution. Set up a webhook or plugin to listen for the\r\n        // payment_intent.succeeded event that handles any business critical\r\n        // post-payment actions.\r\n        const storeOrder = await axios.post('/shop/checkout/success');\r\n        storeOrder\r\n          .then()\r\n          .catch()\r\n\r\n          //Display message\r\n          //Payment Succeeded and StoredOrder in the database\r\n      }\r\n    }\r\n  };\r\n\r\n  handleInputChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { name, phone, email, line1, city, state, zip } = this.state;\r\n    const { cartTotal, cartProducts } = this.props;\r\n\r\n    // if(this.state.client_secret === ''){\r\n    //   return <Spinner />;\r\n    // }\r\n    return (\r\n      <div className=\"row\">\r\n      <div className=\"col-md-4 order-md-2 mb-4\">\r\n        <CartSection cartTotal={cartTotal} cartProducts={cartProducts} />\r\n      </div>\r\n      <div className=\"col-md-8 order-md-1\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <IdentitySection name={name} phone={phone} email={email} handleInputChange={this.handleInputChange}/>\r\n          <AddressSection line1={line1} city={city} state={state} zip={zip} handleInputChange={this.handleInputChange} />\r\n          <CardSection />\r\n          <button className=\"btn btn-primary\" disabled={!this.props.stripe}>Confirm order</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst InjectedCheckoutForm = ({cartProducts, cartTotal}) => {\r\n  return (\r\n    <ElementsConsumer>\r\n      {({stripe, elements}) => (\r\n        <CheckoutForm  stripe={stripe}\r\n          elements={elements}\r\n          cartProducts={cartProducts}\r\n          cartTotal={cartTotal}\r\n          />\r\n      )}\r\n    </ElementsConsumer>\r\n  );\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  cartTotal: state.total.data,\r\n  cartProducts: state.cart.products\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(InjectedCheckoutForm);\r\n"]},"metadata":{},"sourceType":"module"}