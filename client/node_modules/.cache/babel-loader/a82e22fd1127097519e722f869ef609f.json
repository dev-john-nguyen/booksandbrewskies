{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John\\\\Desktop\\\\Modern React With Redux Projects\\\\beersandbrewskies\\\\beersandbrewskies\\\\src\\\\components\\\\shop\\\\components\\\\floatcart\\\\index.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { loadCart, removeProduct, changeProductQuantity } from '../../../../services/cart/actions';\nimport { updateCart } from '../../../../services/total/actions';\nimport CartProduct from './components/CartProduct';\nimport { formatPrice } from '../util';\nimport { stripe } from '../../../../services/stripe/actions';\nimport './css/style.scss';\n\nclass FloatCart extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      newProduct: this.props.newProduct,\n      productToChange: this.props.productToChange,\n      productToRemove: this.props.productToRemove,\n      isOpen: false\n    };\n\n    this.openFloatCart = () => {\n      this.setState({\n        isOpen: true\n      });\n    };\n\n    this.closeFloatCart = () => {\n      this.setState({\n        isOpen: false\n      });\n    };\n\n    this.addProduct = product => {\n      const _this$props = this.props,\n            cartProducts = _this$props.cartProducts,\n            updateCart = _this$props.updateCart;\n      let productAlreadyInCart = false;\n      cartProducts.forEach(cp => {\n        if (cp.id === product.id) {\n          console.log(product.id);\n          cp.quantity += product.quantity;\n          productAlreadyInCart = true;\n        }\n      });\n\n      if (!productAlreadyInCart) {\n        cartProducts.push(product);\n      }\n\n      updateCart(cartProducts);\n      this.openFloatCart();\n    };\n\n    this.removeProduct = product => {\n      const _this$props2 = this.props,\n            cartProducts = _this$props2.cartProducts,\n            updateCart = _this$props2.updateCart;\n      const index = cartProducts.findIndex(p => p.id === product.id);\n\n      if (index >= 0) {\n        cartProducts.splice(index, 1);\n        updateCart(cartProducts);\n      }\n    };\n\n    this.proceedToCheckout = () => {\n      const _this$props$cartTotal = this.props.cartTotal,\n            totalPrice = _this$props$cartTotal.totalPrice,\n            productQuantity = _this$props$cartTotal.productQuantity,\n            currencyFormat = _this$props$cartTotal.currencyFormat,\n            currencyId = _this$props$cartTotal.currencyId; // if (!productQuantity) {\n      //   alert('Add some product in the cart!');\n      // } else {\n      //   alert(\n      //     `Checkout - Subtotal: ${currencyFormat} ${formatPrice(\n      //       totalPrice,\n      //       currencyId\n      //     )}`\n      //   );\n      // }\n\n      this.props.stripe();\n    };\n\n    this.changeProductQuantity = changedProduct => {\n      const _this$props3 = this.props,\n            cartProducts = _this$props3.cartProducts,\n            updateCart = _this$props3.updateCart;\n      const product = cartProducts.find(p => p.id === changedProduct.id);\n      product.quantity = changedProduct.quantity;\n\n      if (product.quantity <= 0) {\n        this.removeProduct(product);\n      }\n\n      updateCart(cartProducts);\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.newProduct !== prevState.newProduct) {\n      return {\n        newProduct: nextProps.newProduct\n      };\n    }\n\n    if (nextProps.productToRemove !== prevState.productToRemove) {\n      return {\n        productToRemove: nextProps.productToRemove\n      };\n    }\n\n    if (nextProps.productToChange !== prevState.productToChange) {\n      return {\n        productToChange: nextProps.productToChange\n      };\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.newProduct !== this.state.newProduct) {\n      this.addProduct(this.state.newProduct);\n    }\n\n    if (prevState.productToRemove !== this.state.productToRemove) {\n      this.removeProduct(this.state.productToRemove);\n    }\n\n    if (prevState.productToChange !== this.state.productToChange) {\n      this.changeProductQuantity(this.state.productToChange);\n    }\n  }\n\n  componentDidMount() {// Publishable Key from Stripe Dashboard\n  }\n\n  render() {\n    const _this$props4 = this.props,\n          cartTotal = _this$props4.cartTotal,\n          cartProducts = _this$props4.cartProducts,\n          removeProduct = _this$props4.removeProduct,\n          changeProductQuantity = _this$props4.changeProductQuantity;\n    const products = cartProducts.map(p => {\n      return React.createElement(CartProduct, {\n        product: p,\n        removeProduct: removeProduct,\n        changeProductQuantity: changeProductQuantity,\n        key: p.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      });\n    });\n    let classes = ['float-cart'];\n\n    if (!!this.state.isOpen) {\n      classes.push('float-cart--open');\n    }\n\n    return React.createElement(\"div\", {\n      className: classes.join(' '),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, this.state.isOpen && React.createElement(\"div\", {\n      onClick: () => this.closeFloatCart(),\n      className: \"float-cart__close-btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"X\"), !this.state.isOpen && React.createElement(\"span\", {\n      onClick: () => this.openFloatCart(),\n      className: \"bag bag--float-cart-closed\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"bag__quantity\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, cartTotal.productQuantity)), React.createElement(\"div\", {\n      className: \"float-cart__content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"float-cart__header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"bag\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"bag__quantity\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, cartTotal.productQuantity)), React.createElement(\"span\", {\n      className: \"header-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"Cart\")), React.createElement(\"div\", {\n      className: \"float-cart__shelf-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, products, !products.length && React.createElement(\"p\", {\n      className: \"shelf-empty\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \"Add some products in the cart \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }), \":)\")), React.createElement(\"div\", {\n      className: \"float-cart__footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"sub\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"SUBTOTAL\"), React.createElement(\"div\", {\n      className: \"sub-price\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"sub-price__val\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, `${cartTotal.currencyFormat} ${formatPrice(cartTotal.totalPrice, cartTotal.currencyId)}`), React.createElement(\"small\", {\n      className: \"sub-price__installment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, !!cartTotal.installments && React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, `OR UP TO ${cartTotal.installments} x ${cartTotal.currencyFormat} ${formatPrice(cartTotal.totalPrice / cartTotal.installments, cartTotal.currencyId)}`))), React.createElement(\"div\", {\n      onClick: () => this.proceedToCheckout(),\n      className: \"buy-btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, \"Checkout\"))));\n  }\n\n}\n\nFloatCart.propTypes = {\n  loadCart: PropTypes.func.isRequired,\n  updateCart: PropTypes.func.isRequired,\n  cartProducts: PropTypes.array.isRequired,\n  newProduct: PropTypes.object,\n  removeProduct: PropTypes.func,\n  productToRemove: PropTypes.object,\n  changeProductQuantity: PropTypes.func,\n  productToChange: PropTypes.object\n};\n\nconst mapStateToProps = state => ({\n  cartProducts: state.cart.products,\n  newProduct: state.cart.productToAdd,\n  productToRemove: state.cart.productToRemove,\n  productToChange: state.cart.productToChange,\n  cartTotal: state.total.data\n});\n\nexport default connect(mapStateToProps, {\n  stripe,\n  loadCart,\n  updateCart,\n  removeProduct,\n  changeProductQuantity\n})(FloatCart);","map":{"version":3,"sources":["C:/Users/John/Desktop/Modern React With Redux Projects/beersandbrewskies/beersandbrewskies/src/components/shop/components/floatcart/index.js"],"names":["React","Component","PropTypes","connect","loadCart","removeProduct","changeProductQuantity","updateCart","CartProduct","formatPrice","stripe","FloatCart","state","newProduct","props","productToChange","productToRemove","isOpen","openFloatCart","setState","closeFloatCart","addProduct","product","cartProducts","productAlreadyInCart","forEach","cp","id","console","log","quantity","push","index","findIndex","p","splice","proceedToCheckout","cartTotal","totalPrice","productQuantity","currencyFormat","currencyId","changedProduct","find","getDerivedStateFromProps","nextProps","prevState","componentDidUpdate","prevProps","componentDidMount","render","products","map","classes","join","length","installments","propTypes","func","isRequired","array","object","mapStateToProps","cart","productToAdd","total","data"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { loadCart, removeProduct, changeProductQuantity } from '../../../../services/cart/actions';\r\nimport { updateCart } from '../../../../services/total/actions';\r\nimport CartProduct from './components/CartProduct';\r\nimport { formatPrice } from '../util';\r\nimport { stripe } from '../../../../services/stripe/actions';\r\n\r\nimport './css/style.scss';\r\n\r\nclass FloatCart extends Component {\r\n  static propTypes = {\r\n     loadCart: PropTypes.func.isRequired,\r\n     updateCart: PropTypes.func.isRequired,\r\n     cartProducts: PropTypes.array.isRequired,\r\n     newProduct: PropTypes.object,\r\n     removeProduct: PropTypes.func,\r\n     productToRemove: PropTypes.object,\r\n     changeProductQuantity: PropTypes.func,\r\n     productToChange: PropTypes.object\r\n   };\r\n\r\n   state = {\r\n     newProduct: this.props.newProduct,\r\n     productToChange: this.props.productToChange,\r\n     productToRemove: this.props.productToRemove,\r\n     isOpen: false\r\n   };\r\n\r\n   static getDerivedStateFromProps(nextProps, prevState) {\r\n\r\n     if (nextProps.newProduct !== prevState.newProduct) {\r\n       return { newProduct : nextProps.newProduct }\r\n     }\r\n\r\n     if(nextProps.productToRemove !== prevState.productToRemove){\r\n       return { productToRemove: nextProps.productToRemove };\r\n     }\r\n\r\n     if (nextProps.productToChange !== prevState.productToChange) {\r\n       return { productToChange: nextProps.productToChange };\r\n     }\r\n     return null;\r\n   }\r\n\r\n   componentDidUpdate(prevProps, prevState){\r\n     if(prevState.newProduct !== this.state.newProduct){\r\n       this.addProduct(this.state.newProduct);\r\n     }\r\n\r\n     if (prevState.productToRemove !== this.state.productToRemove) {\r\n       this.removeProduct(this.state.productToRemove);\r\n     }\r\n\r\n     if (prevState.productToChange !== this.state.productToChange) {\r\n       this.changeProductQuantity(this.state.productToChange);\r\n     }\r\n   }\r\n\r\n   componentDidMount() {\r\n  // Publishable Key from Stripe Dashboard\r\n}\r\n\r\n\r\n\r\n  openFloatCart = () => {\r\n    this.setState({ isOpen: true });\r\n  };\r\n\r\n  closeFloatCart = () => {\r\n    this.setState({ isOpen: false });\r\n  };\r\n\r\n  addProduct = product => {\r\n    const { cartProducts, updateCart } = this.props;\r\n    let productAlreadyInCart = false;\r\n\r\n    cartProducts.forEach(cp => {\r\n      if (cp.id === product.id) {\r\n        console.log(product.id);\r\n        cp.quantity += product.quantity;\r\n        productAlreadyInCart = true;\r\n      }\r\n    });\r\n\r\n    if (!productAlreadyInCart) {\r\n      cartProducts.push(product);\r\n    }\r\n\r\n    updateCart(cartProducts);\r\n    this.openFloatCart();\r\n  };\r\n\r\n  removeProduct = product => {\r\n    const { cartProducts, updateCart } = this.props;\r\n\r\n    const index = cartProducts.findIndex(p => p.id === product.id);\r\n    if (index >= 0) {\r\n      cartProducts.splice(index, 1);\r\n      updateCart(cartProducts);\r\n    }\r\n  };\r\n\r\n  proceedToCheckout = () => {\r\n    const {\r\n      totalPrice,\r\n      productQuantity,\r\n      currencyFormat,\r\n      currencyId\r\n    } = this.props.cartTotal;\r\n\r\n    // if (!productQuantity) {\r\n    //   alert('Add some product in the cart!');\r\n    // } else {\r\n    //   alert(\r\n    //     `Checkout - Subtotal: ${currencyFormat} ${formatPrice(\r\n    //       totalPrice,\r\n    //       currencyId\r\n    //     )}`\r\n    //   );\r\n    // }\r\n\r\n    this.props.stripe();\r\n\r\n  };\r\n\r\n  changeProductQuantity = changedProduct => {\r\n    const { cartProducts, updateCart } = this.props;\r\n\r\n    const product = cartProducts.find(p => p.id === changedProduct.id);\r\n    product.quantity = changedProduct.quantity;\r\n    if (product.quantity <= 0) {\r\n      this.removeProduct(product);\r\n    }\r\n    updateCart(cartProducts);\r\n  }\r\n\r\n  render() {\r\n    const { cartTotal, cartProducts, removeProduct, changeProductQuantity } = this.props;\r\n\r\n    const products = cartProducts.map(p => {\r\n      return (\r\n        <CartProduct product={p} removeProduct={removeProduct} changeProductQuantity={changeProductQuantity} key={p.id} />\r\n      );\r\n    });\r\n\r\n    let classes = ['float-cart'];\r\n\r\n    if (!!this.state.isOpen) {\r\n      classes.push('float-cart--open');\r\n    }\r\n\r\n    return (\r\n      <div className={classes.join(' ')}>\r\n        {/* If cart open, show close (x) button */}\r\n        {this.state.isOpen && (\r\n          <div\r\n            onClick={() => this.closeFloatCart()}\r\n            className=\"float-cart__close-btn\"\r\n          >\r\n            X\r\n          </div>\r\n        )}\r\n\r\n        {/* If cart is closed, show bag with quantity of product and open cart action */}\r\n        {!this.state.isOpen && (\r\n          <span\r\n            onClick={() => this.openFloatCart()}\r\n            className=\"bag bag--float-cart-closed\"\r\n          >\r\n            <span className=\"bag__quantity\">{cartTotal.productQuantity}</span>\r\n          </span>\r\n        )}\r\n\r\n        <div className=\"float-cart__content\">\r\n          <div className=\"float-cart__header\">\r\n            <span className=\"bag\">\r\n              <span className=\"bag__quantity\">{cartTotal.productQuantity}</span>\r\n            </span>\r\n            <span className=\"header-title\">Cart</span>\r\n          </div>\r\n\r\n          <div className=\"float-cart__shelf-container\">\r\n            {products}\r\n            {!products.length && (\r\n              <p className=\"shelf-empty\">\r\n                Add some products in the cart <br />\r\n                :)\r\n              </p>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"float-cart__footer\">\r\n            <div className=\"sub\">SUBTOTAL</div>\r\n            <div className=\"sub-price\">\r\n              <p className=\"sub-price__val\">\r\n                {`${cartTotal.currencyFormat} ${formatPrice(\r\n                  cartTotal.totalPrice,\r\n                  cartTotal.currencyId\r\n                )}`}\r\n              </p>\r\n              <small className=\"sub-price__installment\">\r\n                {!!cartTotal.installments && (\r\n                  <span>\r\n                    {`OR UP TO ${cartTotal.installments} x ${\r\n                      cartTotal.currencyFormat\r\n                    } ${formatPrice(\r\n                      cartTotal.totalPrice / cartTotal.installments,\r\n                      cartTotal.currencyId\r\n                    )}`}\r\n                  </span>\r\n                )}\r\n              </small>\r\n            </div>\r\n            <div onClick={() => this.proceedToCheckout()} className=\"buy-btn\">\r\n              Checkout\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  cartProducts: state.cart.products,\r\n  newProduct: state.cart.productToAdd,\r\n  productToRemove: state.cart.productToRemove,\r\n  productToChange: state.cart.productToChange,\r\n  cartTotal: state.total.data\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { stripe, loadCart, updateCart, removeProduct, changeProductQuantity }\r\n)(FloatCart);\r\n"]},"metadata":{},"sourceType":"module"}