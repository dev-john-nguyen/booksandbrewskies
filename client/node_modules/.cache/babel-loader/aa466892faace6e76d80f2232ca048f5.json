{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John\\\\Desktop\\\\Modern React With Redux Projects\\\\beersandbrewskiesproject\\\\beersandbrewskies\\\\src\\\\components\\\\shop\\\\components\\\\checkout\\\\index.js\";\nimport React from 'react';\nimport { ElementsConsumer, CardElement } from '@stripe/react-stripe-js';\nimport { connect } from 'react-redux';\nimport CardSection from './components/CardSection';\nimport IdentitySection from './components/IdentitySection';\nimport AddressSection from './components/AddressSection';\nimport './css/CheckoutFormStyles.css';\nimport Spinner from '../../../spinner';\nimport CartSection from './components/CartSection';\nimport { getSessionStorageUpdateCart } from '../util';\nimport { getStripe, storeOrder } from '../../../../services/order/actions';\nimport { clearCart } from '../../../../services/cart/actions';\nimport { clearCartTotal } from '../../../../services/total/actions';\nimport history from '../../../../history';\nimport Mymodal from '../../../Modal';\nimport { Modal, Button } from 'react-bootstrap';\n\nclass CheckoutForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      name: '',\n      email: '',\n      phone: '',\n      line1: '',\n      city: '',\n      state: '',\n      zip: '',\n      client_secret: '',\n      session_error: false,\n      order_completed: false,\n      payment_failed: false,\n      orderId: '',\n      buttonLoading: false\n    };\n\n    this.componentDidMount = async () => {\n      const _this$props = this.props,\n            cartTotal = _this$props.cartTotal,\n            cartProducts = _this$props.cartProducts;\n      getSessionStorageUpdateCart(cartProducts, cartTotal);\n\n      if (cartProducts.length > 0) {\n        const response = await getStripe(cartTotal, cartProducts);\n\n        if (response.error) {\n          this.setState({\n            session_error: response.error\n          });\n        } else if (response.data) {\n          this.setState({\n            client_secret: response.data\n          });\n        }\n      }\n    };\n\n    this.handleSubmit = async event => {\n      // We don't want to let default form submission happen here,\n      // which would refresh the page.\n      event.preventDefault();\n      const _this$props2 = this.props,\n            stripe = _this$props2.stripe,\n            elements = _this$props2.elements,\n            cartProducts = _this$props2.cartProducts,\n            cartTotal = _this$props2.cartTotal;\n      const _this$state = this.state,\n            name = _this$state.name,\n            phone = _this$state.phone,\n            email = _this$state.email,\n            line1 = _this$state.line1,\n            city = _this$state.city,\n            state = _this$state.state,\n            zip = _this$state.zip,\n            client_secret = _this$state.client_secret;\n\n      if (!stripe || !elements) {\n        // Stripe.js has not yet loaded.\n        // Make  sure to disable form submission until Stripe.js has loaded.\n        return;\n      }\n\n      const result = await stripe.confirmCardPayment(client_secret, {\n        payment_method: {\n          card: elements.getElement(CardElement),\n          billing_details: {\n            name: name,\n            phone: phone,\n            email: email\n          }\n        },\n        shipping: {\n          name: name,\n          phone: phone,\n          address: {\n            line1: line1,\n            city: city,\n            state: state,\n            postal_code: zip\n          }\n        }\n      });\n\n      if (result.error) {\n        this.setState({\n          payment_failed: true\n        });\n      } else {\n        if (result.paymentIntent.status === 'succeeded') {\n          const response = await storeOrder(result.paymentIntent, cartProducts, cartTotal, name, phone, email);\n\n          if (response.error) {\n            //failed to store order into database\n            this.setState({\n              client_error: true\n            });\n          } else if (response.data) {\n            sessionStorage.removeItem('cartTotal');\n            sessionStorage.removeItem('cartProducts');\n            this.props.clearCart();\n            this.props.clearCartTotal();\n            this.setState({\n              order_completed: true,\n              orderId: response.data.chargeId\n            });\n          } else {\n            // failed to store order into database\n            this.setState({\n              client_error: true\n            });\n          }\n        }\n      }\n    };\n\n    this.handleInputChange = event => {\n      const target = event.target;\n      const value = target.value;\n      const name = target.name;\n      this.setState({\n        [name]: value\n      });\n    };\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          name = _this$state2.name,\n          phone = _this$state2.phone,\n          email = _this$state2.email,\n          line1 = _this$state2.line1,\n          city = _this$state2.city,\n          state = _this$state2.state,\n          zip = _this$state2.zip,\n          client_secret = _this$state2.client_secret,\n          session_error = _this$state2.session_error,\n          order_completed = _this$state2.order_completed,\n          orderId = _this$state2.orderId,\n          buttonLoading = _this$state2.buttonLoading,\n          payment_failed = _this$state2.payment_failed;\n    const _this$props3 = this.props,\n          cartTotal = _this$props3.cartTotal,\n          cartProducts = _this$props3.cartProducts;\n\n    if (payment_failed) {\n      const descriptionOrderFailed = \"Looks like your card has insufficient funds. No payment was taken.\";\n      return React.createElement(Mymodal, {\n        showValue: true,\n        closeDirect: \"/shop/checkout\",\n        handleState: () => this.setState({\n          order_failed: false\n        }),\n        buttonName: \"Try Again\",\n        title: \"Payment Failed\",\n        description: descriptionOrderFailed,\n        svgType: \"warning\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      });\n    }\n\n    if (order_completed) {\n      const descriptionOrderCompleted = `Your confirmation number is ${orderId}.\n      Check your email for details. If you have any questions or\n      concerns regarding your order please feel free to contact us.`;\n      return React.createElement(Mymodal, {\n        showValue: true,\n        closeDirect: \"/\",\n        buttonName: \"OK\",\n        title: `Thank You ${name}!`,\n        description: descriptionOrderCompleted,\n        svgType: \"success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      });\n    } // if(cartProducts.length <= 0) {\n    //   return <h1>Cart is empty</h1>;\n    // }\n    // if(client_secret === ''){\n    //   if(session_error){\n    //     const clientErrorDescription = `Looks like something went wrong.\n    //     I apologize for the inconvience. No payment was taken.`;\n    //     return (\n    //           <Modal\n    //           showValue={true}\n    //           closeDirect = '/'\n    //           buttonName = 'Close'\n    //           title='Oops!'\n    //           description= {clientErrorDescription}\n    //           svgType=\"error\"\n    //           />\n    //     );\n    //   }else{\n    //     return <Spinner />;\n    //   }\n    // }\n    // <div className=\"col-md-4 order-md-2 mb-4\">\n    //   <CartSection cartTotal={cartTotal} cartProducts={cartProducts} />\n    // </div>\n    // return (\n    //   <div className=\"row\">\n    //   <div className=\"col-md-8 order-md-1\">\n    //     <form onSubmit={this.handleSubmit}>\n    //       <IdentitySection name={name} phone={phone} email={email} handleInputChange={this.handleInputChange}/>\n    //       <AddressSection line1={line1} city={city} state={state} zip={zip} handleInputChange={this.handleInputChange} />\n    //       <CardSection />\n    //         <button className=\"btn btn-primary\" disabled={!this.props.stripe} onClick={() => this.setState({buttonLoading: true})}>\n    //           {buttonLoading && <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> }\n    //           Confirm\n    //         </button>\n    //     </form>\n    //   </div>\n    // </div>\n    // );\n\n\n    const formStuff = React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(IdentitySection, {\n      name: name,\n      phone: phone,\n      email: email,\n      handleInputChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }), React.createElement(AddressSection, {\n      line1: line1,\n      city: city,\n      state: state,\n      zip: zip,\n      handleInputChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }), React.createElement(CardSection, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      disabled: !this.props.stripe,\n      onClick: () => this.setState({\n        buttonLoading: true\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, buttonLoading && React.createElement(\"span\", {\n      className: \"spinner-border spinner-border-sm\",\n      role: \"status\",\n      \"aria-hidden\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }), \"Pay\"));\n    const walletSvg = React.createElement(\"svg\", {\n      className: \"bi bi-wallet\",\n      style: {\n        width: \"2.5rem\",\n        height: \"2.5rem\"\n      },\n      width: \"1em\",\n      height: \"1em\",\n      viewBox: \"0 0 20 20\",\n      fill: \"currentColor\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(\"path\", {\n      \"fill-rule\": \"evenodd\",\n      d: \"M3.5 5a.5.5 0 00-.5.5v2h5a.5.5 0 01.5.5c0 .253.08.644.306.958.207.288.557.542 1.194.542.637 0 .987-.254 1.194-.542.226-.314.306-.705.306-.958a.5.5 0 01.5-.5h5v-2a.5.5 0 00-.5-.5h-13zM17 8.5h-4.551a2.678 2.678 0 01-.443 1.042c-.393.546-1.043.958-2.006.958-.963 0-1.613-.412-2.006-.958A2.679 2.679 0 017.551 8.5H3v6a.5.5 0 00.5.5h13a.5.5 0 00.5-.5v-6zm-15-3A1.5 1.5 0 013.5 4h13A1.5 1.5 0 0118 5.5v9a1.5 1.5 0 01-1.5 1.5h-13A1.5 1.5 0 012 14.5v-9z\",\n      \"clip-rule\": \"evenodd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }));\n    return React.createElement(Modal, {\n      show: true,\n      onHide: () => history.push('/shop'),\n      \"aria-labelledby\": \"contained-modal-title-vcenter\",\n      centered: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      closeButton: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, walletSvg)), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, formStuff));\n  }\n\n}\n\nconst InjectedCheckoutForm = ({\n  cartProducts,\n  cartTotal,\n  clearCart,\n  clearCartTotal\n}) => {\n  return React.createElement(ElementsConsumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  }, ({\n    stripe,\n    elements\n  }) => React.createElement(CheckoutForm, {\n    stripe: stripe,\n    elements: elements,\n    cartProducts: cartProducts,\n    cartTotal: cartTotal,\n    clearCart: clearCart,\n    clearCartTotal: clearCartTotal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = state => ({\n  cartTotal: state.total.data,\n  cartProducts: state.cart.products\n});\n\nexport default connect(mapStateToProps, {\n  clearCart,\n  clearCartTotal\n})(InjectedCheckoutForm);","map":{"version":3,"sources":["C:/Users/John/Desktop/Modern React With Redux Projects/beersandbrewskiesproject/beersandbrewskies/src/components/shop/components/checkout/index.js"],"names":["React","ElementsConsumer","CardElement","connect","CardSection","IdentitySection","AddressSection","Spinner","CartSection","getSessionStorageUpdateCart","getStripe","storeOrder","clearCart","clearCartTotal","history","Mymodal","Modal","Button","CheckoutForm","Component","state","name","email","phone","line1","city","zip","client_secret","session_error","order_completed","payment_failed","orderId","buttonLoading","componentDidMount","props","cartTotal","cartProducts","length","response","error","setState","data","handleSubmit","event","preventDefault","stripe","elements","result","confirmCardPayment","payment_method","card","getElement","billing_details","shipping","address","postal_code","paymentIntent","status","client_error","sessionStorage","removeItem","chargeId","handleInputChange","target","value","render","descriptionOrderFailed","order_failed","descriptionOrderCompleted","formStuff","walletSvg","width","height","push","InjectedCheckoutForm","mapStateToProps","total","cart","products"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {ElementsConsumer, CardElement} from '@stripe/react-stripe-js';\r\nimport { connect } from 'react-redux';\r\nimport CardSection from './components/CardSection';\r\nimport IdentitySection from './components/IdentitySection';\r\nimport AddressSection from './components/AddressSection';\r\nimport './css/CheckoutFormStyles.css';\r\nimport Spinner from '../../../spinner'\r\nimport CartSection from './components/CartSection';\r\nimport { getSessionStorageUpdateCart } from '../util';\r\nimport { getStripe, storeOrder } from '../../../../services/order/actions';\r\nimport { clearCart } from '../../../../services/cart/actions';\r\nimport { clearCartTotal } from '../../../../services/total/actions';\r\nimport history from '../../../../history';\r\nimport Mymodal from '../../../Modal';\r\nimport {Modal , Button} from 'react-bootstrap';\r\n\r\nclass CheckoutForm extends React.Component {\r\n\r\n  state = {\r\n    name: '',\r\n    email: '',\r\n    phone: '',\r\n    line1: '',\r\n    city: '',\r\n    state: '',\r\n    zip: '',\r\n    client_secret: '',\r\n    session_error: false,\r\n    order_completed: false,\r\n    payment_failed: false,\r\n    orderId: '',\r\n    buttonLoading: false\r\n  }\r\n\r\n  componentDidMount = async() => {\r\n    const {cartTotal, cartProducts} = this.props;\r\n    getSessionStorageUpdateCart(cartProducts, cartTotal);\r\n    if(cartProducts.length > 0 ){\r\n      const response = await getStripe(cartTotal, cartProducts);\r\n\r\n      if(response.error){\r\n        this.setState({session_error: response.error});\r\n      }else if (response.data){\r\n        this.setState({client_secret: response.data});\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  handleSubmit = async (event) => {\r\n    // We don't want to let default form submission happen here,\r\n    // which would refresh the page.\r\n    event.preventDefault();\r\n\r\n    const {stripe, elements, cartProducts, cartTotal} = this.props\r\n    const {name, phone, email, line1, city, state, zip, client_secret} = this.state;\r\n\r\n    if (!stripe || !elements) {\r\n      // Stripe.js has not yet loaded.\r\n      // Make  sure to disable form submission until Stripe.js has loaded.\r\n      return;\r\n    }\r\n\r\n    const result = await stripe.confirmCardPayment(client_secret, {\r\n      payment_method: {\r\n        card: elements.getElement(CardElement),\r\n        billing_details: {\r\n          name: name,\r\n          phone: phone,\r\n          email: email\r\n        },\r\n      },\r\n      shipping: {\r\n        name: name,\r\n        phone: phone,\r\n        address: {\r\n          line1: line1,\r\n          city: city,\r\n          state: state,\r\n          postal_code: zip\r\n        }\r\n      }\r\n    });\r\n\r\n    if (result.error) {\r\n      this.setState({ payment_failed: true });\r\n    } else {\r\n      if (result.paymentIntent.status === 'succeeded') {\r\n\r\n        const response = await storeOrder(\r\n          result.paymentIntent,\r\n          cartProducts,\r\n          cartTotal,\r\n          name,\r\n          phone,\r\n          email);\r\n\r\n          if(response.error){\r\n            //failed to store order into database\r\n            this.setState({client_error: true});\r\n          }else if(response.data){\r\n            sessionStorage.removeItem('cartTotal');\r\n            sessionStorage.removeItem('cartProducts');\r\n            this.props.clearCart();\r\n            this.props.clearCartTotal();\r\n            this.setState({ order_completed: true, orderId: response.data.chargeId });\r\n          }else{\r\n            // failed to store order into database\r\n            this.setState({client_error: true});\r\n          }\r\n\r\n      }\r\n    }\r\n  };\r\n\r\n  handleInputChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { name, phone, email, line1, city, state, zip, client_secret, session_error, order_completed, orderId, buttonLoading, payment_failed } = this.state;\r\n    const { cartTotal, cartProducts } = this.props;\r\n\r\n    if(payment_failed){\r\n      const descriptionOrderFailed = \"Looks like your card has insufficient funds. No payment was taken.\";\r\n      return (\r\n        <Mymodal\r\n        showValue={true}\r\n        closeDirect = '/shop/checkout'\r\n        handleState = {() => this.setState({order_failed: false})}\r\n        buttonName = 'Try Again'\r\n        title='Payment Failed'\r\n        description= {descriptionOrderFailed}\r\n        svgType=\"warning\"\r\n        />\r\n      )\r\n    }\r\n\r\n    if(order_completed){\r\n      const descriptionOrderCompleted = `Your confirmation number is ${orderId}.\r\n      Check your email for details. If you have any questions or\r\n      concerns regarding your order please feel free to contact us.`;\r\n\r\n      return(\r\n        <Mymodal\r\n        showValue={true}\r\n        closeDirect = '/'\r\n        buttonName = 'OK'\r\n        title={`Thank You ${name}!`}\r\n        description= {descriptionOrderCompleted}\r\n        svgType=\"success\"\r\n        />\r\n      )\r\n    }\r\n\r\n    // if(cartProducts.length <= 0) {\r\n    //   return <h1>Cart is empty</h1>;\r\n    // }\r\n\r\n    // if(client_secret === ''){\r\n    //   if(session_error){\r\n    //     const clientErrorDescription = `Looks like something went wrong.\r\n    //     I apologize for the inconvience. No payment was taken.`;\r\n    //     return (\r\n    //           <Modal\r\n    //           showValue={true}\r\n    //           closeDirect = '/'\r\n    //           buttonName = 'Close'\r\n    //           title='Oops!'\r\n    //           description= {clientErrorDescription}\r\n    //           svgType=\"error\"\r\n    //           />\r\n    //     );\r\n    //   }else{\r\n    //     return <Spinner />;\r\n    //   }\r\n    // }\r\n\r\n\r\n    // <div className=\"col-md-4 order-md-2 mb-4\">\r\n    //   <CartSection cartTotal={cartTotal} cartProducts={cartProducts} />\r\n    // </div>\r\n\r\n    // return (\r\n    //   <div className=\"row\">\r\n    //   <div className=\"col-md-8 order-md-1\">\r\n    //     <form onSubmit={this.handleSubmit}>\r\n    //       <IdentitySection name={name} phone={phone} email={email} handleInputChange={this.handleInputChange}/>\r\n    //       <AddressSection line1={line1} city={city} state={state} zip={zip} handleInputChange={this.handleInputChange} />\r\n    //       <CardSection />\r\n    //         <button className=\"btn btn-primary\" disabled={!this.props.stripe} onClick={() => this.setState({buttonLoading: true})}>\r\n    //           {buttonLoading && <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> }\r\n    //           Confirm\r\n    //         </button>\r\n    //     </form>\r\n    //   </div>\r\n    // </div>\r\n    // );\r\n\r\n    const formStuff = (\r\n          <form onSubmit={this.handleSubmit}>\r\n            <IdentitySection name={name} phone={phone} email={email} handleInputChange={this.handleInputChange}/>\r\n            <AddressSection line1={line1} city={city} state={state} zip={zip} handleInputChange={this.handleInputChange} />\r\n            <CardSection />\r\n              <button className=\"btn btn-primary\" disabled={!this.props.stripe} onClick={() => this.setState({buttonLoading: true})}>\r\n                {buttonLoading && <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> }\r\n                Pay\r\n              </button>\r\n          </form>\r\n    );\r\n\r\n    const walletSvg = (\r\n      <svg className=\"bi bi-wallet\" style={{width: \"2.5rem\", height: \"2.5rem\"}} width=\"1em\" height=\"1em\" viewBox=\"0 0 20 20\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path fill-rule=\"evenodd\" d=\"M3.5 5a.5.5 0 00-.5.5v2h5a.5.5 0 01.5.5c0 .253.08.644.306.958.207.288.557.542 1.194.542.637 0 .987-.254 1.194-.542.226-.314.306-.705.306-.958a.5.5 0 01.5-.5h5v-2a.5.5 0 00-.5-.5h-13zM17 8.5h-4.551a2.678 2.678 0 01-.443 1.042c-.393.546-1.043.958-2.006.958-.963 0-1.613-.412-2.006-.958A2.679 2.679 0 017.551 8.5H3v6a.5.5 0 00.5.5h13a.5.5 0 00.5-.5v-6zm-15-3A1.5 1.5 0 013.5 4h13A1.5 1.5 0 0118 5.5v9a1.5 1.5 0 01-1.5 1.5h-13A1.5 1.5 0 012 14.5v-9z\" clip-rule=\"evenodd\">\r\n        </path>\r\n      </svg>\r\n    );\r\n\r\n    return (\r\n      <Modal show={true}\r\n        onHide={() => history.push('/shop')}\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>\r\n          {walletSvg}\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>{formStuff}</Modal.Body>\r\n      </Modal>\r\n    );\r\n\r\n  }\r\n}\r\n\r\nconst InjectedCheckoutForm = ({cartProducts, cartTotal, clearCart, clearCartTotal}) => {\r\n  return (\r\n    <ElementsConsumer>\r\n      {({stripe, elements}) => (\r\n        <CheckoutForm  stripe={stripe}\r\n          elements={elements}\r\n          cartProducts={cartProducts}\r\n          cartTotal={cartTotal}\r\n          clearCart={clearCart}\r\n          clearCartTotal={clearCartTotal}\r\n          />\r\n      )}\r\n    </ElementsConsumer>\r\n  );\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  cartTotal: state.total.data,\r\n  cartProducts: state.cart.products\r\n});\r\n\r\nexport default connect(mapStateToProps, {clearCart, clearCartTotal})(InjectedCheckoutForm);\r\n"]},"metadata":{},"sourceType":"module"}