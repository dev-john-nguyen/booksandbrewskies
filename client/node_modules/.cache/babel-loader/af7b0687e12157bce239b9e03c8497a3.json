{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John\\\\Desktop\\\\Modern React With Redux Projects\\\\beersandbrewskies\\\\beersandbrewskies\\\\src\\\\components\\\\shop\\\\components\\\\checkout\\\\index.js\";\nimport React from 'react';\nimport { ElementsConsumer, CardElement } from '@stripe/react-stripe-js';\nimport CardSection from './components/CardSection';\nimport IdentitySection from './components/IdentitySection';\nimport AddressSection from './components/AddressSection';\n\nclass CheckoutForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      firstName: '',\n      lastName: '',\n      email: '',\n      line1: '',\n      city: '',\n      state: '',\n      zip: ''\n    };\n\n    this.handleSubmit = async event => {\n      // We don't want to let default form submission happen here,\n      // which would refresh the page.\n      event.preventDefault();\n      console.log(\"Called\");\n      const _this$props = this.props,\n            stripe = _this$props.stripe,\n            elements = _this$props.elements;\n\n      if (!stripe || !elements) {\n        // Stripe.js has not yet loaded.\n        // Make  sure to disable form submission until Stripe.js has loaded.\n        return;\n      }\n\n      const result = await stripe.confirmCardPayment('{CLIENT_SECRET}', {\n        payment_method: {\n          card: elements.getElement(CardElement),\n          billing_details: {\n            name: 'Jenny Rosen'\n          }\n        }\n      });\n\n      if (result.error) {\n        // Show error to your customer (e.g., insufficient funds)\n        console.log(result.error.message);\n      } else {\n        // The payment has been processed!\n        if (result.paymentIntent.status === 'succeeded') {// Show a success message to your customer\n          // There's a risk of the customer closing the window before callback\n          // execution. Set up a webhook or plugin to listen for the\n          // payment_intent.succeeded event that handles any business critical\n          // post-payment actions.\n        }\n      }\n    };\n\n    this.handleInputChange = event => {\n      const target = event.target;\n      const value = target.value;\n      const name = target.name;\n      this.setState({\n        [name]: value\n      });\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          firstName = _this$state.firstName,\n          lastName = _this$state.lastName,\n          email = _this$state.email,\n          line1 = _this$state.line1,\n          city = _this$state.city,\n          state = _this$state.state,\n          zip = _this$state.zip;\n    return React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(IdentitySection, {\n      firstName: this.state.firstName,\n      lastName: lastName,\n      email: email,\n      handleInputChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(AddressSection, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(CardSection, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      disabled: !this.props.stripe,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Confirm order\"));\n  }\n\n}\n\nexport default function InjectedCheckoutForm() {\n  return React.createElement(ElementsConsumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, ({\n    stripe,\n    elements\n  }) => React.createElement(CheckoutForm, {\n    stripe: stripe,\n    elements: elements,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["C:/Users/John/Desktop/Modern React With Redux Projects/beersandbrewskies/beersandbrewskies/src/components/shop/components/checkout/index.js"],"names":["React","ElementsConsumer","CardElement","CardSection","IdentitySection","AddressSection","CheckoutForm","Component","state","firstName","lastName","email","line1","city","zip","handleSubmit","event","preventDefault","console","log","props","stripe","elements","result","confirmCardPayment","payment_method","card","getElement","billing_details","name","error","message","paymentIntent","status","handleInputChange","target","value","setState","render","InjectedCheckoutForm"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {ElementsConsumer, CardElement} from '@stripe/react-stripe-js';\r\n\r\nimport CardSection from './components/CardSection';\r\nimport IdentitySection from './components/IdentitySection';\r\nimport AddressSection from './components/AddressSection';\r\n\r\nclass CheckoutForm extends React.Component {\r\n\r\n  state = {\r\n    firstName: '',\r\n    lastName: '',\r\n    email: '',\r\n    line1: '',\r\n    city: '',\r\n    state: '',\r\n    zip: ''\r\n  }\r\n\r\n  handleSubmit = async (event) => {\r\n    // We don't want to let default form submission happen here,\r\n    // which would refresh the page.\r\n    event.preventDefault();\r\n\r\n    console.log(\"Called\");\r\n\r\n    const {stripe, elements} = this.props\r\n\r\n    if (!stripe || !elements) {\r\n      // Stripe.js has not yet loaded.\r\n      // Make  sure to disable form submission until Stripe.js has loaded.\r\n      return;\r\n    }\r\n\r\n    const result = await stripe.confirmCardPayment('{CLIENT_SECRET}', {\r\n      payment_method: {\r\n        card: elements.getElement(CardElement),\r\n        billing_details: {\r\n          name: 'Jenny Rosen',\r\n        },\r\n      }\r\n    });\r\n\r\n    if (result.error) {\r\n      // Show error to your customer (e.g., insufficient funds)\r\n      console.log(result.error.message);\r\n    } else {\r\n      // The payment has been processed!\r\n      if (result.paymentIntent.status === 'succeeded') {\r\n        // Show a success message to your customer\r\n        // There's a risk of the customer closing the window before callback\r\n        // execution. Set up a webhook or plugin to listen for the\r\n        // payment_intent.succeeded event that handles any business critical\r\n        // post-payment actions.\r\n      }\r\n    }\r\n  };\r\n\r\n  handleInputChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {firstName, lastName, email, line1, city, state, zip} = this.state;\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <IdentitySection firstName={this.state.firstName} lastName={lastName} email={email} handleInputChange={this.handleInputChange}/>\r\n        <AddressSection />\r\n        <CardSection />\r\n        <button disabled={!this.props.stripe}>Confirm order</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default function InjectedCheckoutForm() {\r\n  return (\r\n    <ElementsConsumer>\r\n      {({stripe, elements}) => (\r\n        <CheckoutForm  stripe={stripe} elements={elements} />\r\n      )}\r\n    </ElementsConsumer>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}